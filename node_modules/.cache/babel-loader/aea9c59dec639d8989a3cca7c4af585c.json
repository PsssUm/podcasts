{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport querystring from './querystring';\nvar defaultOptions = {\n  method: 'GET',\n  data: null\n};\n\nfunction getXMLHttpRequest() {\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // eslint-disable-next-line\n    return new XMLHttpRequest();\n  }\n}\n\nfunction makeRequest(url, options) {\n  var isCanceled;\n  var error = new Error('Request was aborted');\n  var request = getXMLHttpRequest();\n\n  var opts = _objectSpread({}, defaultOptions, {}, options);\n\n  if (opts.data && opts.method.toLowerCase() === 'get') {\n    url += \"?\".concat(querystring.create(opts.data));\n  }\n\n  var requestPromise = new Promise(function (resolve, reject) {\n    if (!request) {\n      reject(new Error('XMLHttpRequest not supported'));\n    }\n\n    if (opts.timeout) {\n      request.timeout = opts.timeout;\n    }\n\n    request.open(opts.method, url, true);\n\n    if (opts.headers) {\n      Object.keys(opts.headers).forEach(function (key) {\n        request.setRequestHeader(key, opts.headers[key]);\n      });\n    }\n\n    request.onreadystatechange = function () {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          resolve(request.responseText);\n        } else {\n          reject(new Error(request.status));\n        }\n      }\n    };\n\n    request.ontimeout = function () {\n      reject(new Error('XMLHttpRequest timeout expires'));\n    };\n\n    request.send(opts.data);\n  });\n  return {\n    promise: new Promise(function (resolve, reject) {\n      requestPromise.then(function (res) {\n        return isCanceled ? reject(error) : resolve(res);\n      }).catch(function (e) {\n        return isCanceled ? console.log(error) || reject(error) : reject(e);\n      });\n    }),\n    abort: function abort() {\n      isCanceled = true;\n\n      if (request) {\n        request.abort();\n      }\n    }\n  };\n}\n/**\n * @deprecated будет удален в версии 3.0.0\n */\n\n\nexport default (function (url, options) {\n  return makeRequest(url, options);\n});","map":{"version":3,"sources":["../../../src/lib/request.js"],"names":["defaultOptions","method","data","error","request","getXMLHttpRequest","opts","url","querystring","requestPromise","reject","Object","resolve","promise","isCanceled","console","abort","makeRequest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,WAAA,MAAA,eAAA;AAEA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,MAAM,EADe,KAAA;AAErBC,EAAAA,IAAI,EAAE;AAFe,CAAvB;;AAKA,SAAA,iBAAA,GAA8B;AAC5B,MAAI,OAAA,cAAA,KAAJ,WAAA,EAA2C;AACzC;AACA,WAAO,IAAP,cAAO,EAAP;AACD;AACF;;AAED,SAAA,WAAA,CAAA,GAAA,EAAA,OAAA,EAAoC;AAClC,MAAA,UAAA;AAEA,MAAMC,KAAK,GAAG,IAAA,KAAA,CAAd,qBAAc,CAAd;AACA,MAAMC,OAAO,GAAGC,iBAAhB,EAAA;;AACA,MAAMC,IAAI,GAAA,aAAA,CAAA,EAAA,EAAA,cAAA,EAAA,EAAA,EAAV,OAAU,CAAV;;AAEA,MAAIA,IAAI,CAAJA,IAAAA,IAAaA,IAAI,CAAJA,MAAAA,CAAAA,WAAAA,OAAjB,KAAA,EAAsD;AACpDC,IAAAA,GAAG,IAAA,IAAA,MAAA,CAAQC,WAAW,CAAXA,MAAAA,CAAmBF,IAAI,CAAlCC,IAAWC,CAAR,CAAHD;AACD;;AAED,MAAME,cAAc,GAAG,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtD,QAAI,CAAJ,OAAA,EAAc;AACZC,MAAAA,MAAM,CAAC,IAAA,KAAA,CAAPA,8BAAO,CAAD,CAANA;AACD;;AAED,QAAIJ,IAAI,CAAR,OAAA,EAAkB;AAChBF,MAAAA,OAAO,CAAPA,OAAAA,GAAkBE,IAAI,CAAtBF,OAAAA;AACD;;AAEDA,IAAAA,OAAO,CAAPA,IAAAA,CAAaE,IAAI,CAAjBF,MAAAA,EAAAA,GAAAA,EAAAA,IAAAA;;AAEA,QAAIE,IAAI,CAAR,OAAA,EAAkB;AAChBK,MAAAA,MAAM,CAANA,IAAAA,CAAYL,IAAI,CAAhBK,OAAAA,EAAAA,OAAAA,CAAkC,UAAA,GAAA,EAAO;AACvCP,QAAAA,OAAO,CAAPA,gBAAAA,CAAAA,GAAAA,EAA8BE,IAAI,CAAJA,OAAAA,CAA9BF,GAA8BE,CAA9BF;AADFO,OAAAA;AAGD;;AAEDP,IAAAA,OAAO,CAAPA,kBAAAA,GAA6B,YAAY;AACvC,UAAIA,OAAO,CAAPA,UAAAA,KAAJ,CAAA,EAA8B;AAC5B,YAAIA,OAAO,CAAPA,MAAAA,KAAJ,GAAA,EAA4B;AAC1BQ,UAAAA,OAAO,CAACR,OAAO,CAAfQ,YAAO,CAAPA;AADF,SAAA,MAEO;AACLF,UAAAA,MAAM,CAAC,IAAA,KAAA,CAAUN,OAAO,CAAxBM,MAAO,CAAD,CAANA;AACD;AACF;AAPHN,KAAAA;;AAUAA,IAAAA,OAAO,CAAPA,SAAAA,GAAoB,YAAY;AAC9BM,MAAAA,MAAM,CAAC,IAAA,KAAA,CAAPA,gCAAO,CAAD,CAANA;AADFN,KAAAA;;AAIAA,IAAAA,OAAO,CAAPA,IAAAA,CAAaE,IAAI,CAAjBF,IAAAA;AA/BF,GAAuB,CAAvB;AAkCA,SAAO;AAELS,IAAAA,OAAO,EAAE,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAA2B;AAC9CJ,MAAAA,cAAc,CAAdA,IAAAA,CACQ,UAAA,GAAA,EAAG;AAAA,eAAIK,UAAU,GAAGJ,MAAM,CAAT,KAAS,CAAT,GAAmBE,OAAO,CAAxC,GAAwC,CAAxC;AADXH,OAAAA,EAAAA,KAAAA,CAES,UAAA,CAAA,EAAA;AAAA,eAAOK,UAAU,GAAGC,OAAO,CAAPA,GAAAA,CAAAA,KAAAA,KAAsBL,MAAM,CAA/B,KAA+B,CAA/B,GAAyCA,MAAM,CAAhE,CAAgE,CAAhE;AAFTD,OAAAA;AAHG,KAEI,CAFJ;AAQLO,IAAAA,KARK,EAAA,SAAA,KAAA,GAQI;AACPF,MAAAA,UAAU,GAAVA,IAAAA;;AACA,UAAA,OAAA,EAAa;AACXV,QAAAA,OAAO,CAAPA,KAAAA;AACD;AACF;AAbI,GAAP;AAgBD;AAED;;;;;AAGA,gBAAe,UAAA,GAAA,EAAA,OAAA,EAAA;AAAA,SAAkBa,WAAW,CAAA,GAAA,EAA7B,OAA6B,CAA7B;AAAf,CAAA","sourcesContent":["import querystring from './querystring';\n\nconst defaultOptions = {\n  method: 'GET',\n  data: null\n};\n\nfunction getXMLHttpRequest () {\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // eslint-disable-next-line\n    return new XMLHttpRequest();\n  }\n}\n\nfunction makeRequest (url, options) {\n  let isCanceled;\n\n  const error = new Error('Request was aborted');\n  const request = getXMLHttpRequest();\n  const opts = { ...defaultOptions, ...options };\n\n  if (opts.data && opts.method.toLowerCase() === 'get') {\n    url += `?${querystring.create(opts.data)}`;\n  }\n\n  const requestPromise = new Promise((resolve, reject) => {\n    if (!request) {\n      reject(new Error('XMLHttpRequest not supported'));\n    }\n\n    if (opts.timeout) {\n      request.timeout = opts.timeout;\n    }\n\n    request.open(opts.method, url, true);\n\n    if (opts.headers) {\n      Object.keys(opts.headers).forEach(key => {\n        request.setRequestHeader(key, opts.headers[key]);\n      });\n    }\n\n    request.onreadystatechange = function () {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          resolve(request.responseText);\n        } else {\n          reject(new Error(request.status));\n        }\n      }\n    };\n\n    request.ontimeout = function () {\n      reject(new Error('XMLHttpRequest timeout expires'));\n    };\n\n    request.send(opts.data);\n  });\n\n  return {\n\n    promise: new Promise(function (resolve, reject) {\n      requestPromise\n        .then(res => isCanceled ? reject(error) : resolve(res))\n        .catch((e) => isCanceled ? console.log(error) || reject(error) : reject(e));\n    }),\n\n    abort () {\n      isCanceled = true;\n      if (request) {\n        request.abort();\n      }\n    }\n\n  };\n}\n\n/**\n * @deprecated будет удален в версии 3.0.0\n */\nexport default (url, options) => makeRequest(url, options);\n"]},"metadata":{},"sourceType":"module"}