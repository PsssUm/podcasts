{"ast":null,"code":"const fs = require('fs');\n\nconst versions = ['2.5', 'x', '2', '1'],\n      layers = ['x', '3', '2', '1'],\n      bitRates = {\n  V1L1: [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448],\n  V1L2: [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384],\n  V1L3: [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320],\n  V2L1: [0, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256],\n  V2L2: [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],\n  V2L3: [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],\n  V1Lx: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  V2Lx: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  VxLx: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  VxL1: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  VxL2: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  VxL3: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n},\n      sampleRates = {\n  'x': [0, 0, 0],\n  '1': [44100, 48000, 32000],\n  '2': [22050, 24000, 16000],\n  '2.5': [11025, 12000, 8000]\n},\n      samples = {\n  '1': {\n    'x': 0,\n    '1': 384,\n    '2': 1152,\n    '3': 1152\n  },\n  '2': {\n    'x': 0,\n    '1': 384,\n    '2': 1152,\n    '3': 576\n  },\n  'x': {\n    'x': 0,\n    '1': 0,\n    '2': 0,\n    '3': 0\n  }\n};\n\nclass Duration {\n  /**\r\n   * Returns the duration of an mp3 file.\r\n   * \r\n   * @param {String} filename \r\n   * @returns {{duration:Number, offset:Number}}\r\n   */\n  static getDuration(filename) {\n    var fd = fs.openSync(filename, 'r'),\n        buffer = Buffer.alloc(100),\n        block = fs.readSync(fd, buffer, 0, 100, 0),\n        stat = fs.statSync(filename),\n        duration = 0,\n        _offset = 0;\n\n    try {\n      calculateDuration: {\n        if (block < 100) {\n          break calculateDuration;\n        }\n\n        var offset = _offset = this.skipID3v2Tag(buffer);\n\n        while (offset < stat.size) {\n          block = fs.readSync(fd, buffer, 0, 10, offset);\n\n          if (block < 10) {\n            break calculateDuration;\n          } else if (buffer[0] == 255 && (buffer[1] & 224) == 224) {\n            var info = this.parseFrameHeader(buffer);\n\n            if (!info.frameSize || isNaN(info.frameSize) || !info.samples || isNaN(info.samples)) {\n              offset += 1;\n            } else {\n              offset += info.frameSize;\n              duration += info.samples / info.sampleRate;\n            }\n          } else if (buffer[0] === 84 && buffer[1] === 65 && buffer[2] === 71) {\n            // 'TAG'\n            offset += 128;\n          } else {\n            offset += 1;\n          }\n        }\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      fs.closeSync(fd);\n    }\n\n    return {\n      duration: parseFloat(duration.toFixed(2)),\n      offset: _offset\n    };\n  }\n  /**\r\n   * http://id3.org/ID3v2Easy\r\n   * \r\n   * @param {Buffer} buffer \r\n   * @returns {Number}\r\n   */\n\n\n  static skipID3v2Tag(buffer) {\n    if (buffer[0] == 73 && buffer[1] == 68 && buffer[2] == 51) {\n      // ID3\n      var z0 = buffer[6],\n          z1 = buffer[7],\n          z2 = buffer[8],\n          z3 = buffer[9];\n\n      if ((z0 & 128) == 0 && (z1 & 128) == 0 && (z2 & 128) == 0 && (z3 & 128) == 0) {\n        var headerSize = 10,\n            tagSize = (z0 & 127) * 2097152 + (z1 & 127) * 16384 + (z2 & 128) * 128 + (z3 & 128),\n            footerSize = buffer[5] & 16 ? 10 : 0;\n        return headerSize + tagSize + footerSize;\n      }\n    }\n\n    return 0;\n  }\n  /**\r\n   * Parses the frame header of a buffer.\r\n   * \r\n   * @param {Buffer} buffer \r\n   * @returns {sampleRate:Number, samples:Object, frameSize:Number}\r\n   */\n\n\n  static parseFrameHeader(buffer) {\n    var b1 = buffer[1],\n        b2 = buffer[2],\n        versionBits = (b1 & 24) >> 3,\n        version = versions[versionBits],\n        simpleVersion = version == '2.5' ? 2 : version,\n        layerBits = (b1 & 6) >> 1,\n        layer = layers[layerBits],\n        bitRateKey = `V${simpleVersion}L${layer}`,\n        bitRateIdx = (b2 & 240) >> 4,\n        bitRate = bitRates[bitRateKey][bitRateIdx] || 0,\n        sampleRateIdx = (b2 & 12) >> 2,\n        sampleRate = sampleRates[version][sampleRateIdx] || 0,\n        $samples = samples[simpleVersion][layer],\n        paddingBit = (b2 & 2) >> 1,\n        frameSize = this.getFrameSize(layer, bitRate, sampleRate, paddingBit);\n    return {\n      sampleRate,\n      samples: $samples,\n      frameSize\n    };\n  }\n  /**\r\n   * Returns the frame size.\r\n   * \r\n   * @param {String} layer \r\n   * @param {Number} bitRate \r\n   * @param {Number} sampleRate \r\n   * @param {Number} paddingBit \r\n   * @returns {Number}\r\n   */\n\n\n  static getFrameSize(layer, bitRate, sampleRate, paddingBit) {\n    if (layer == 1) {\n      return parseInt((12 * bitRate * 1000 / sampleRate + paddingBit) * 4);\n    } else {\n      return parseInt(144 * bitRate * 1000 / sampleRate + paddingBit);\n    }\n  }\n\n}\n\nmodule.exports = Duration;","map":{"version":3,"sources":["/Users/spbiphones/Dropbox/projects/web projects/podcasts/node_modules/mp3-cutter/lib/duration.js"],"names":["fs","require","versions","layers","bitRates","V1L1","V1L2","V1L3","V2L1","V2L2","V2L3","V1Lx","V2Lx","VxLx","VxL1","VxL2","VxL3","sampleRates","samples","Duration","getDuration","filename","fd","openSync","buffer","Buffer","alloc","block","readSync","stat","statSync","duration","_offset","calculateDuration","offset","skipID3v2Tag","size","info","parseFrameHeader","frameSize","isNaN","sampleRate","e","console","error","closeSync","parseFloat","toFixed","z0","z1","z2","z3","headerSize","tagSize","footerSize","b1","b2","versionBits","version","simpleVersion","layerBits","layer","bitRateKey","bitRateIdx","bitRate","sampleRateIdx","$samples","paddingBit","getFrameSize","parseInt","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\r\n\r\nconst versions = ['2.5', 'x', '2', '1'],\r\n      layers = ['x', '3', '2', '1'],\r\n      bitRates = {\r\n        V1L1: [0,32,64,96,128,160,192,224,256,288,320,352,384,416,448],\r\n        V1L2: [0,32,48,56, 64, 80, 96,112,128,160,192,224,256,320,384],\r\n        V1L3: [0,32,40,48, 56, 64, 80, 96,112,128,160,192,224,256,320],\r\n        V2L1: [0,32,48,56, 64, 80, 96,112,128,144,160,176,192,224,256],\r\n        V2L2: [0, 8,16,24, 32, 40, 48, 56, 64, 80, 96,112,128,144,160],\r\n        V2L3: [0, 8,16,24, 32, 40, 48, 56, 64, 80, 96,112,128,144,160],\r\n        V1Lx: [0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\r\n        V2Lx: [0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\r\n        VxLx: [0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\r\n        VxL1: [0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\r\n        VxL2: [0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\r\n        VxL3: [0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]\r\n      },\r\n      sampleRates = {\r\n        'x':   [    0,    0,    0],\r\n        '1'  : [44100,48000,32000],\r\n        '2'  : [22050,24000,16000],\r\n        '2.5': [11025,12000, 8000]\r\n      },\r\n      samples = {\r\n        '1': {\r\n            'x':   0,\r\n            '1': 384,\r\n            '2':1152,\r\n            '3':1152\r\n        },\r\n        '2': {\r\n            'x':   0,\r\n            '1': 384,\r\n            '2':1152,\r\n            '3': 576\r\n        },\r\n        'x': {\r\n            'x':0,\r\n            '1':0,\r\n            '2':0,\r\n            '3':0\r\n        }\r\n      };\r\n\r\nclass Duration {\r\n    /**\r\n     * Returns the duration of an mp3 file.\r\n     * \r\n     * @param {String} filename \r\n     * @returns {{duration:Number, offset:Number}}\r\n     */\r\n    static getDuration(filename) {\r\n        var fd = fs.openSync(filename, 'r'),\r\n            buffer = Buffer.alloc(100),\r\n            block = fs.readSync(fd, buffer, 0, 100, 0),\r\n            stat = fs.statSync(filename),\r\n            duration = 0,\r\n            _offset = 0;\r\n\r\n        try {\r\n            calculateDuration: {\r\n                if(block < 100) {\r\n                    break calculateDuration;\r\n                }\r\n\r\n                var offset = _offset = this.skipID3v2Tag(buffer);\r\n                while(offset < stat.size) {\r\n                    block = fs.readSync(fd, buffer, 0, 10, offset);\r\n          \r\n                    if(block < 10) {\r\n                        break calculateDuration;\r\n                    } else if(buffer[0] == 255 && (buffer[1] & 224) == 224) {\r\n                        var info = this.parseFrameHeader(buffer);\r\n            \r\n                        if(!info.frameSize || isNaN(info.frameSize) || !info.samples || isNaN(info.samples)) {\r\n                            offset += 1;\r\n                        } else {\r\n                            offset += info.frameSize;\r\n                            duration += (info.samples / info.sampleRate);\r\n                        }\r\n                    } else if (buffer[0] === 84 && buffer[1] === 65 && buffer[2] === 71) { // 'TAG'\r\n                        offset += 128;\r\n                    } else {\r\n                        offset += 1;\r\n                    }\r\n                  }\r\n            }\r\n        } catch(e) {\r\n            console.error(e);\r\n        } finally {\r\n            fs.closeSync(fd);\r\n        }\r\n\r\n        return {duration:parseFloat(duration.toFixed(2)), offset:_offset};            \r\n    }\r\n\r\n    /**\r\n     * http://id3.org/ID3v2Easy\r\n     * \r\n     * @param {Buffer} buffer \r\n     * @returns {Number}\r\n     */\r\n    static skipID3v2Tag(buffer) {\r\n      if(buffer[0] == 73 && buffer[1] == 68 && buffer[2] == 51) { // ID3\r\n        var z0 = buffer[6],\r\n            z1 = buffer[7],\r\n            z2 = buffer[8],\r\n            z3 = buffer[9];\r\n\r\n        if((z0 & 128) == 0 && (z1 & 128) == 0 && (z2 & 128) == 0 && (z3 & 128) == 0) {\r\n            var headerSize = 10,\r\n                tagSize = ((z0 & 127) * 2097152) + ((z1 & 127) * 16384) + ((z2 & 128) * 128) + (z3 & 128),\r\n                footerSize = (buffer[5] & 16) ? 10 : 0;\r\n            return headerSize + tagSize + footerSize;\r\n        }\r\n      }\r\n\r\n      return 0;      \r\n    }\r\n\r\n    /**\r\n     * Parses the frame header of a buffer.\r\n     * \r\n     * @param {Buffer} buffer \r\n     * @returns {sampleRate:Number, samples:Object, frameSize:Number}\r\n     */\r\n    static parseFrameHeader(buffer) {\r\n      var b1 = buffer[1],\r\n          b2 = buffer[2],\r\n          versionBits = (b1 & 24) >> 3,\r\n          version = versions[versionBits],\r\n          simpleVersion = (version == '2.5') ? 2 : version,\r\n          layerBits = (b1 & 6) >> 1,\r\n          layer = layers[layerBits],\r\n          bitRateKey = `V${simpleVersion}L${layer}`,\r\n          bitRateIdx = (b2 & 240) >> 4,\r\n          bitRate = bitRates[bitRateKey][bitRateIdx] || 0,\r\n          sampleRateIdx = (b2 & 12) >> 2,\r\n          sampleRate = sampleRates[version][sampleRateIdx] || 0,\r\n          $samples = samples[simpleVersion][layer],\r\n          paddingBit = (b2 & 2) >> 1,\r\n          frameSize = this.getFrameSize(layer, bitRate, sampleRate, paddingBit);\r\n          \r\n      return {\r\n          sampleRate,\r\n          samples: $samples,\r\n          frameSize\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Returns the frame size.\r\n     * \r\n     * @param {String} layer \r\n     * @param {Number} bitRate \r\n     * @param {Number} sampleRate \r\n     * @param {Number} paddingBit \r\n     * @returns {Number}\r\n     */\r\n    static getFrameSize(layer, bitRate, sampleRate, paddingBit) {\r\n      if(layer == 1) {\r\n        return parseInt(((12 * bitRate * 1000 / sampleRate) + paddingBit) * 4);\r\n      } else {\r\n        return parseInt(((144 * bitRate * 1000) / sampleRate) + paddingBit);\r\n      }\r\n    }\r\n}\r\n\r\nmodule.exports = Duration;"]},"metadata":{},"sourceType":"script"}