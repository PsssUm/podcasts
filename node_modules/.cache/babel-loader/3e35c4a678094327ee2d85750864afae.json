{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport vkConnect from '@vkontakte/vk-connect';\nimport { canUseDOM } from '../../lib/dom';\n\nvar ConfigProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ConfigProvider, _React$Component);\n\n  function ConfigProvider(props, context) {\n    var _this;\n\n    _classCallCheck(this, ConfigProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConfigProvider).call(this, props));\n\n    if (canUseDOM) {\n      (context.document || window.document).body.setAttribute('scheme', props.scheme);\n    }\n\n    return _this;\n  }\n\n  _createClass(ConfigProvider, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.scheme !== this.props.scheme) {\n        this.document.body.setAttribute('scheme', this.props.scheme);\n      }\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        isWebView: this.props.isWebView,\n        webviewType: this.props.webviewType,\n        scheme: this.props.scheme,\n        app: this.props.app\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.context.document || window.document;\n    }\n  }]);\n\n  return ConfigProvider;\n}(React.Component);\n\n_defineProperty(ConfigProvider, \"childContextTypes\", {\n  isWebView: PropTypes.bool,\n  scheme: PropTypes.string,\n  webviewType: PropTypes.oneOf(['vkapps', 'internal']),\n  app: PropTypes.string\n});\n\n_defineProperty(ConfigProvider, \"defaultProps\", {\n  webviewType: 'internal',\n  isWebView: vkConnect.isWebView(),\n  scheme: 'client_light'\n});\n\n_defineProperty(ConfigProvider, \"contextTypes\", {\n  document: PropTypes.object\n});\n\nexport { ConfigProvider as default };","map":{"version":3,"sources":["../../../../src/components/ConfigProvider/ConfigProvider.tsx"],"names":["ConfigProvider","React","Component","context","window","props","isWebView","PropTypes","scheme","webviewType","app","string","vkConnect","document","object","prevProps"],"mappings":";;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,uBAAA;AAEA,SAAA,SAAA,QAAA,eAAA;;IASqBA,c;;;;;AACnB,WAAA,cAAA,CAAA,KAAA,EAAA,OAAA,EAA6B;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA;;AAC3B,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,cAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AACA,QAAA,SAAA,EAAe;AACb,OAACG,OAAO,CAAPA,QAAAA,IAAoBC,MAAM,CAA3B,QAAA,EAAA,IAAA,CAAA,YAAA,CAAA,QAAA,EAAkEC,KAAK,CAAvE,MAAA;AACD;;AAJ0B,WAAA,KAAA;AAK5B;;;;uCAuBkBU,S,EAAW;AAC5B,UAAIA,SAAS,CAATA,MAAAA,KAAqB,KAAA,KAAA,CAAzB,MAAA,EAA4C;AAC1C,aAAA,QAAA,CAAA,IAAA,CAAA,YAAA,CAAA,QAAA,EAA0C,KAAA,KAAA,CAA1C,MAAA;AACD;AACF;;;sCAEsC;AACrC,aAAO;AACLT,QAAAA,SAAS,EAAE,KAAA,KAAA,CADN,SAAA;AAELG,QAAAA,WAAW,EAAE,KAAA,KAAA,CAFR,WAAA;AAGLD,QAAAA,MAAM,EAAE,KAAA,KAAA,CAHH,MAAA;AAILE,QAAAA,GAAG,EAAE,KAAA,KAAA,CAAWA;AAJX,OAAP;AAMD;;;6BAEQ;AACP,aAAO,KAAA,KAAA,CAAP,QAAA;AACD;;;wBArBc;AACb,aAAO,KAAA,OAAA,CAAA,QAAA,IAAyBN,MAAM,CAAtC,QAAA;AACD;;;;EA3ByCH,KAAK,CAACC,S;;gBAA7BF,c,uBAQQ;AACzBM,EAAAA,SAAS,EAAEC,SAAS,CADK,IAAA;AAEzBC,EAAAA,MAAM,EAAED,SAAS,CAFQ,MAAA;AAGzBE,EAAAA,WAAW,EAAEF,SAAS,CAATA,KAAAA,CAAgB,CAAA,QAAA,EAHJ,UAGI,CAAhBA,CAHY;AAIzBG,EAAAA,GAAG,EAAEH,SAAS,CAACI;AAJU,C;;gBARRX,c,kBAeG;AACpBS,EAAAA,WAAW,EADS,UAAA;AAEpBH,EAAAA,SAAS,EAAEM,SAAS,CAFA,SAETA,EAFS;AAGpBJ,EAAAA,MAAM,EAAE;AAHY,C;;gBAfHR,c,kBAqBG;AACpBa,EAAAA,QAAQ,EAAEN,SAAS,CAACO;AADA,C;;SArBHd,c","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport vkConnect from '@vkontakte/vk-connect';\nimport { HasChildren } from '../../types/props';\nimport { canUseDOM } from '../../lib/dom';\n\nexport interface ConfigProviderProps extends HasChildren {\n  scheme?: 'client_light' | 'client_dark' | 'bright_light' | 'space_gray',\n  isWebView?: boolean,\n  webviewType?: 'vkapps' | 'internal',\n  app?: string\n}\n\nexport default class ConfigProvider extends React.Component<ConfigProviderProps> {\n  constructor (props, context) {\n    super(props);\n    if (canUseDOM) {\n      (context.document || window.document).body.setAttribute('scheme', props.scheme);\n    }\n  }\n\n  static childContextTypes = {\n    isWebView: PropTypes.bool,\n    scheme: PropTypes.string,\n    webviewType: PropTypes.oneOf(['vkapps', 'internal']),\n    app: PropTypes.string\n  };\n\n  static defaultProps = {\n    webviewType: 'internal',\n    isWebView: vkConnect.isWebView(),\n    scheme: 'client_light'\n  };\n\n  static contextTypes = {\n    document: PropTypes.object\n  };\n\n  get document() {\n    return this.context.document || window.document;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.scheme !== this.props.scheme) {\n      this.document.body.setAttribute('scheme', this.props.scheme);\n    }\n  }\n\n  getChildContext(): ConfigProviderProps {\n    return {\n      isWebView: this.props.isWebView,\n      webviewType: this.props.webviewType,\n      scheme: this.props.scheme,\n      app: this.props.app\n    };\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}