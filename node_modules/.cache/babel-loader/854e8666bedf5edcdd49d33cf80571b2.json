{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../lib/classNames';\n\nfunction calcStrokeDashOffset(value, radius) {\n  var progress = value / 100;\n  return 2 * Math.PI * radius * (1 - progress);\n}\n\nvar PullToRefreshSpinner = React.memo(function (_ref) {\n  var on = _ref.on,\n      progress = _ref.progress,\n      size = _ref.size,\n      strokeWidth = _ref.strokeWidth,\n      style = _ref.style;\n  var radius = 0.5 * size - 0.5 * strokeWidth;\n  var dasharray = 2 * Math.PI * radius;\n  var circleCenter = 0.5 * size;\n  var dashoffset = calcStrokeDashOffset(on ? 80 : progress, radius);\n  return React.createElement(\"div\", {\n    className: classNames('PullToRefresh__spinner', {\n      'PullToRefresh__spinner--on': on\n    }),\n    style: style\n  }, React.createElement(\"svg\", {\n    className: \"PullToRefresh__spinner-self\",\n    style: {\n      width: size,\n      height: size\n    },\n    viewBox: \"0 0 \".concat(size, \" \").concat(size),\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"g\", {\n    style: {\n      width: size,\n      height: size,\n      transformOrigin: \"\".concat(circleCenter, \"px \").concat(circleCenter, \"px\")\n    }\n  }, React.createElement(\"circle\", {\n    className: \"PullToRefresh__spinner-path\",\n    fill: \"none\",\n    strokeDasharray: dasharray,\n    strokeDashoffset: dashoffset,\n    strokeWidth: strokeWidth,\n    strokeLinecap: \"round\",\n    cx: circleCenter,\n    cy: circleCenter,\n    r: radius\n  }))));\n});\nPullToRefreshSpinner.propTypes = {\n  size: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  on: PropTypes.bool,\n  progress: PropTypes.number,\n  style: PropTypes.object\n};\nPullToRefreshSpinner.defaultProps = {\n  size: 24,\n  strokeWidth: 2.5,\n  on: true,\n  progress: null\n};\nexport default PullToRefreshSpinner;","map":{"version":3,"sources":["../../../../src/components/PullToRefresh/PullToRefreshSpinner.js"],"names":["progress","value","Math","PullToRefreshSpinner","on","size","strokeWidth","style","radius","dasharray","circleCenter","dashoffset","calcStrokeDashOffset","classNames","width","height","transformOrigin","PropTypes","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../lib/classNames';\n\nfunction calcStrokeDashOffset (value, radius) {\n  const progress = value / 100;\n  return 2 * Math.PI * radius * (1 - progress);\n}\n\nconst PullToRefreshSpinner = React.memo(({ on, progress, size, strokeWidth, style }) => {\n  const radius = 0.5 * size - 0.5 * strokeWidth;\n  const dasharray = 2 * Math.PI * radius;\n  const circleCenter = 0.5 * size;\n\n  const dashoffset = calcStrokeDashOffset(on ? 80 : progress, radius);\n\n  return (\n    <div\n      className={classNames('PullToRefresh__spinner', {\n        'PullToRefresh__spinner--on': on\n      })}\n      style={style}\n    >\n      <svg\n        className=\"PullToRefresh__spinner-self\"\n        style={{\n          width: size,\n          height: size\n        }}\n        viewBox={`0 0 ${size} ${size}`}\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          style={{\n            width: size,\n            height: size,\n            transformOrigin: `${circleCenter}px ${circleCenter}px`\n          }}\n        >\n          <circle\n            className=\"PullToRefresh__spinner-path\"\n            fill=\"none\"\n            strokeDasharray={dasharray}\n            strokeDashoffset={dashoffset}\n            strokeWidth={strokeWidth}\n            strokeLinecap=\"round\"\n            cx={circleCenter}\n            cy={circleCenter}\n            r={radius}\n          />\n        </g>\n      </svg>\n    </div>\n  );\n});\n\nPullToRefreshSpinner.propTypes = {\n  size: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  on: PropTypes.bool,\n  progress: PropTypes.number,\n  style: PropTypes.object\n};\n\nPullToRefreshSpinner.defaultProps = {\n  size: 24,\n  strokeWidth: 2.5,\n  on: true,\n  progress: null\n};\n\nexport default PullToRefreshSpinner;\n"]},"metadata":{},"sourceType":"module"}