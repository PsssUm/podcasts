{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Touch, { TouchRootContext } from '../Touch/Touch';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport classNames from '../../lib/classNames';\nimport { IS_PLATFORM_IOS, IS_PLATFORM_ANDROID } from '../../lib/platform';\nimport getClassName from '../../helpers/getClassName';\nimport PullToRefreshSpinner from './PullToRefreshSpinner';\nvar baseClassName = getClassName('PullToRefresh');\n\nfunction cancelEvent(event) {\n  if (!event) return false;\n\n  while (event.originalEvent) {\n    event = event.originalEvent;\n  }\n\n  if (event.preventDefault) event.preventDefault();\n  if (event.stopPropagation) event.stopPropagation();\n  return false;\n}\n\nvar PullToRefresh =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(PullToRefresh, _PureComponent);\n\n  function PullToRefresh(props) {\n    var _this;\n\n    _classCallCheck(this, PullToRefresh);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PullToRefresh).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchStart\", function (e) {\n      if (_this.state.refreshing) cancelEvent(e);\n\n      _this.setState({\n        touchDown: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onWindowTouchMove\", function (e) {\n      if (_this.state.refreshing) cancelEvent(e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchMove\", function (e) {\n      var isY = e.isY,\n          shiftY = e.shiftY;\n      var _this$params = _this.params,\n          start = _this$params.start,\n          max = _this$params.max;\n      var pageYOffset = _this.window.pageYOffset;\n      var _this$state = _this.state,\n          refreshing = _this$state.refreshing,\n          watching = _this$state.watching,\n          touchDown = _this$state.touchDown;\n\n      if (watching && touchDown) {\n        cancelEvent(e);\n        var positionMultiplier = _this.params.positionMultiplier;\n        var shift = Math.max(0, shiftY - _this.state.touchY);\n        var currentY = Math.max(start, Math.min(_this.params.maxY, start + shift * positionMultiplier));\n        var progress = currentY > -10 ? Math.abs((currentY + 10) / max) * 80 : 0;\n\n        _this.setState({\n          spinnerY: currentY,\n          spinnerProgress: Math.min(80, Math.max(0, progress)),\n          canRefresh: progress > 80,\n          contentShift: (currentY + 10) * 2.3\n        });\n\n        if (progress > 85 && !refreshing && IS_PLATFORM_IOS) {\n          _this.runRefreshing();\n        }\n      } else if (isY && pageYOffset === 0 && shiftY > 0 && !refreshing && touchDown) {\n        cancelEvent(e);\n\n        _this.setState({\n          watching: true,\n          touchY: shiftY,\n          spinnerY: start,\n          spinnerProgress: 0\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchEnd\", function () {\n      var _this$state2 = _this.state,\n          refreshing = _this$state2.refreshing,\n          canRefresh = _this$state2.canRefresh,\n          refreshingFinished = _this$state2.refreshingFinished;\n\n      _this.setState({\n        watching: false,\n        touchDown: false\n      }, function () {\n        if (canRefresh && !refreshing) {\n          _this.runRefreshing();\n        } else if (refreshing && refreshingFinished) {\n          _this.resetRefreshingState();\n        } else {\n          _this.setState({\n            spinnerY: refreshing ? _this.params.refreshing : _this.params.start,\n            spinnerProgress: 0,\n            contentShift: 0\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefreshingFinish\", function () {\n      _this.setState({\n        refreshingFinished: true\n      }, function () {\n        !_this.state.touchDown && _this.resetRefreshingState();\n      });\n    });\n\n    _this.params = {\n      start: IS_PLATFORM_ANDROID ? -45 : -10,\n      max: IS_PLATFORM_ANDROID ? 80 : 50,\n      maxY: IS_PLATFORM_ANDROID ? 80 : 400,\n      refreshing: IS_PLATFORM_ANDROID ? 50 : 36,\n      positionMultiplier: IS_PLATFORM_ANDROID ? 1 : 0.21\n    };\n    _this.state = {\n      watching: false,\n      refreshing: false,\n      canRefresh: false,\n      touchDown: false,\n      refreshingFinished: false,\n      touchY: 0,\n      spinnerY: _this.params.start,\n      spinnerProgress: 0,\n      contentShift: 0\n    };\n    _this.contentRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(PullToRefresh, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.document.addEventListener('touchmove', this.onWindowTouchMove, {\n        cancelable: true,\n        passive: false\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.document.removeEventListener('touchmove', this.onWindowTouchMove);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.isFetching && !this.props.isFetching) {\n        this.onRefreshingFinish();\n      }\n    }\n  }, {\n    key: \"runRefreshing\",\n    value: function runRefreshing() {\n      if (!this.state.refreshing && this.props.onRefresh) {\n        this.setState({\n          refreshing: true,\n          spinnerY: IS_PLATFORM_ANDROID ? this.params.refreshing : this.state.spinnerY\n        });\n        this.props.onRefresh();\n      }\n    }\n  }, {\n    key: \"resetRefreshingState\",\n    value: function resetRefreshingState() {\n      this.setState({\n        watching: false,\n        canRefresh: false,\n        refreshing: false,\n        refreshingFinished: false,\n        spinnerY: this.params.start,\n        spinnerProgress: 0,\n        contentShift: 0\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          onRefresh = _this$props.onRefresh,\n          isFetching = _this$props.isFetching,\n          restProps = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"onRefresh\", \"isFetching\"]);\n\n      var _this$state3 = this.state,\n          watching = _this$state3.watching,\n          refreshing = _this$state3.refreshing,\n          spinnerY = _this$state3.spinnerY,\n          spinnerProgress = _this$state3.spinnerProgress,\n          canRefresh = _this$state3.canRefresh,\n          touchDown = _this$state3.touchDown,\n          contentShift = _this$state3.contentShift;\n      var spinnerTransform = \"translate3d(0, \".concat(spinnerY, \"px, 0)\");\n      var contentTransform = refreshing && !touchDown && IS_PLATFORM_IOS ? \"translate3d(0, 100px, 0)\" : IS_PLATFORM_IOS && contentShift ? \"translate3d(0, \".concat(contentShift, \"px, 0)\") : '';\n      return React.createElement(TouchRootContext.Provider, {\n        value: true\n      }, React.createElement(Touch, _extends({}, restProps, {\n        onStart: this.onTouchStart,\n        onMove: this.onTouchMove,\n        onEnd: this.onTouchEnd,\n        className: classNames(baseClassName, className, {\n          'PullToRefresh--watching': watching,\n          'PullToRefresh--refreshing': refreshing\n        })\n      }), React.createElement(FixedLayout, {\n        className: \"PullToRefresh__controls\"\n      }, React.createElement(PullToRefreshSpinner, {\n        style: {\n          transform: spinnerTransform,\n          WebkitTransform: spinnerTransform,\n          opacity: watching || refreshing || canRefresh ? 1 : 0\n        },\n        on: refreshing,\n        progress: refreshing ? null : spinnerProgress\n      })), React.createElement(\"div\", {\n        className: \"PullToRefresh__content\",\n        ref: this.contentRef,\n        style: {\n          transform: contentTransform,\n          WebkitTransform: contentTransform\n        }\n      }, children)));\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.context.document || document;\n    }\n  }, {\n    key: \"window\",\n    get: function get() {\n      return this.context.window || window;\n    }\n  }, {\n    key: \"scrollTop\",\n    get: function get() {\n      return this.document.scrollingElement.scrollTop;\n    }\n  }]);\n\n  return PullToRefresh;\n}(PureComponent);\n\n_defineProperty(PullToRefresh, \"propTypes\", {\n  children: PropTypes.node,\n  className: PropTypes.string,\n\n  /**\n   * Будет вызвана для обновления контента\n   */\n  onRefresh: PropTypes.func.isRequired,\n\n  /**\n   * Определяет, выполняется ли обновление. Для скрытия спиннера после получения контента необходимо передать `false`\n   */\n  isFetching: PropTypes.bool\n});\n\n_defineProperty(PullToRefresh, \"contextTypes\", {\n  window: PropTypes.any,\n  document: PropTypes.any\n});\n\nexport { PullToRefresh as default };","map":{"version":3,"sources":["../../../../src/components/PullToRefresh/PullToRefresh.js"],"names":["baseClassName","getClassName","event","PullToRefresh","PureComponent","start","IS_PLATFORM_ANDROID","max","maxY","refreshing","positionMultiplier","watching","canRefresh","touchDown","refreshingFinished","touchY","spinnerY","spinnerProgress","contentShift","React","children","PropTypes","className","onRefresh","isFetching","bool","window","document","any","cancelable","passive","prevProps","cancelEvent","isY","shiftY","e","pageYOffset","shift","Math","currentY","progress","restProps","spinnerTransform","contentTransform","IS_PLATFORM_IOS","classNames","transform","WebkitTransform","opacity"],"mappings":";;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,KAAA,IAAA,gBAAA,QAAA,gBAAA;AACA,OAAA,WAAA,MAAA,4BAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AACA,SAAA,eAAA,EAAA,mBAAA,QAAA,oBAAA;AACA,OAAA,YAAA,MAAA,4BAAA;AACA,OAAA,oBAAA,MAAA,wBAAA;AAEA,IAAMA,aAAa,GAAGC,YAAY,CAAlC,eAAkC,CAAlC;;AAEA,SAAA,WAAA,CAAA,KAAA,EAA6B;AAC3B,MAAI,CAAJ,KAAA,EAAY,OAAA,KAAA;;AACZ,SAAOC,KAAK,CAAZ,aAAA,EAAA;AAA4BA,IAAAA,KAAK,GAAGA,KAAK,CAAbA,aAAAA;AAA5B;;AACA,MAAIA,KAAK,CAAT,cAAA,EAA0BA,KAAK,CAALA,cAAAA;AAC1B,MAAIA,KAAK,CAAT,eAAA,EAA2BA,KAAK,CAALA,eAAAA;AAC3B,SAAA,KAAA;AACD;;IAEoBC,a;;;;;AACnB,WAAA,aAAA,CAAA,KAAA,EAAoB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA;;AAClB,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,aAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AADkB,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EA2EL,UAAA,CAAA,EAAO;AACpB,UAAI,KAAA,CAAA,KAAA,CAAJ,UAAA,EAA2B6B,WAAW,CAAXA,CAAW,CAAXA;;AAC3B,MAAA,KAAA,CAAA,QAAA,CAAc;AAAEnB,QAAAA,SAAS,EAAE;AAAb,OAAd;AA7EkB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,mBAAA,EAgFA,UAAA,CAAA,EAAO;AACzB,UAAI,KAAA,CAAA,KAAA,CAAJ,UAAA,EAA2BmB,WAAW,CAAXA,CAAW,CAAXA;AAjFT,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,aAAA,EAoFN,UAAA,CAAA,EAAO;AAAA,UACXC,GADW,GACKE,CADL,CAAA,GAAA;AAAA,UACND,MADM,GACKC,CADL,CAAA,MAAA;AAAA,UAAA,YAAA,GAEI,KAAA,CAFJ,MAAA;AAAA,UAEX9B,KAFW,GAAA,YAAA,CAAA,KAAA;AAAA,UAEJE,GAFI,GAAA,YAAA,CAAA,GAAA;AAGnB,UAAM6B,WAAW,GAAG,KAAA,CAAA,MAAA,CAApB,WAAA;AAHmB,UAAA,WAAA,GAKyB,KAAA,CALzB,KAAA;AAAA,UAKX3B,UALW,GAAA,WAAA,CAAA,UAAA;AAAA,UAKCE,QALD,GAAA,WAAA,CAAA,QAAA;AAAA,UAKWE,SALX,GAAA,WAAA,CAAA,SAAA;;AAOnB,UAAIF,QAAQ,IAAZ,SAAA,EAA2B;AACzBqB,QAAAA,WAAW,CAAXA,CAAW,CAAXA;AADyB,YAGjBtB,kBAHiB,GAGM,KAAA,CAHN,MAGM,CAHN,kBAAA;AAKzB,YAAM2B,KAAK,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYJ,MAAM,GAAG,KAAA,CAAA,KAAA,CAAnC,MAAcI,CAAd;AAEA,YAAMC,QAAQ,GAAGD,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAAgBA,IAAI,CAAJA,GAAAA,CAAS,KAAA,CAAA,MAAA,CAATA,IAAAA,EAA2BjC,KAAK,GAAIgC,KAAK,GAA1E,kBAAiCC,CAAhBA,CAAjB;AACA,YAAME,QAAQ,GAAGD,QAAQ,GAAG,CAAXA,EAAAA,GAAiBD,IAAI,CAAJA,GAAAA,CAAS,CAACC,QAAQ,GAAT,EAAA,IAATD,GAAAA,IAAjBC,EAAAA,GAAjB,CAAA;;AAEA,QAAA,KAAA,CAAA,QAAA,CAAc;AACZvB,UAAAA,QAAQ,EADI,QAAA;AAEZC,UAAAA,eAAe,EAAEqB,IAAI,CAAJA,GAAAA,CAAAA,EAAAA,EAAaA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAFlB,QAEkBA,CAAbA,CAFL;AAGZ1B,UAAAA,UAAU,EAAE4B,QAAQ,GAHR,EAAA;AAIZtB,UAAAA,YAAY,EAAE,CAACqB,QAAQ,GAAT,EAAA,IAAkB;AAJpB,SAAd;;AAOA,YAAIC,QAAQ,GAARA,EAAAA,IAAiB,CAAjBA,UAAAA,IAAJ,eAAA,EAAqD;AACnD,UAAA,KAAA,CAAA,aAAA;AACD;AAnBH,OAAA,MAoBO,IAAIP,GAAG,IAAIG,WAAW,KAAlBH,CAAAA,IAA4BC,MAAM,GAAlCD,CAAAA,IAA0C,CAA1CA,UAAAA,IAAJ,SAAA,EAAwE;AAC7ED,QAAAA,WAAW,CAAXA,CAAW,CAAXA;;AAEA,QAAA,KAAA,CAAA,QAAA,CAAc;AACZrB,UAAAA,QAAQ,EADI,IAAA;AAEZI,UAAAA,MAAM,EAFM,MAAA;AAGZC,UAAAA,QAAQ,EAHI,KAAA;AAIZC,UAAAA,eAAe,EAAE;AAJL,SAAd;AAMD;AAxHiB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,YAAA,EA2HP,YAAM;AAAA,UAAA,YAAA,GACsC,KAAA,CADtC,KAAA;AAAA,UACTR,UADS,GAAA,YAAA,CAAA,UAAA;AAAA,UACGG,UADH,GAAA,YAAA,CAAA,UAAA;AAAA,UACeE,kBADf,GAAA,YAAA,CAAA,kBAAA;;AAGjB,MAAA,KAAA,CAAA,QAAA,CAAc;AACZH,QAAAA,QAAQ,EADI,KAAA;AAEZE,QAAAA,SAAS,EAAE;AAFC,OAAd,EAGG,YAAM;AACP,YAAID,UAAU,IAAI,CAAlB,UAAA,EAA+B;AAC7B,UAAA,KAAA,CAAA,aAAA;AADF,SAAA,MAEO,IAAIH,UAAU,IAAd,kBAAA,EAAsC;AAC3C,UAAA,KAAA,CAAA,oBAAA;AADK,SAAA,MAEA;AACL,UAAA,KAAA,CAAA,QAAA,CAAc;AACZO,YAAAA,QAAQ,EAAEP,UAAU,GAAG,KAAA,CAAA,MAAA,CAAH,UAAA,GAA4B,KAAA,CAAA,MAAA,CADpC,KAAA;AAEZQ,YAAAA,eAAe,EAFH,CAAA;AAGZC,YAAAA,YAAY,EAAE;AAHF,WAAd;AAKD;AAdH,OAAA;AA9HkB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,oBAAA,EA2JC,YAAM;AACzB,MAAA,KAAA,CAAA,QAAA,CAAc;AACZJ,QAAAA,kBAAkB,EAAE;AADR,OAAd,EAEG,YAAM;AACP,SAAC,KAAA,CAAA,KAAA,CAAD,SAAA,IAAyB,KAAA,CAAzB,oBAAyB,EAAzB;AAHF,OAAA;AA5JkB,KAAA,CAAA;;AAGlB,IAAA,KAAA,CAAA,MAAA,GAAc;AACZT,MAAAA,KAAK,EAAEC,mBAAmB,GAAG,CAAH,EAAA,GAAS,CADvB,EAAA;AAEZC,MAAAA,GAAG,EAAED,mBAAmB,GAAA,EAAA,GAFZ,EAAA;AAGZE,MAAAA,IAAI,EAAEF,mBAAmB,GAAA,EAAA,GAHb,GAAA;AAIZG,MAAAA,UAAU,EAAEH,mBAAmB,GAAA,EAAA,GAJnB,EAAA;AAMZI,MAAAA,kBAAkB,EAAEJ,mBAAmB,GAAA,CAAA,GAAO;AANlC,KAAd;AASA,IAAA,KAAA,CAAA,KAAA,GAAa;AACXK,MAAAA,QAAQ,EADG,KAAA;AAEXF,MAAAA,UAAU,EAFC,KAAA;AAGXG,MAAAA,UAAU,EAHC,KAAA;AAKXC,MAAAA,SAAS,EALE,KAAA;AAMXC,MAAAA,kBAAkB,EANP,KAAA;AAQXC,MAAAA,MAAM,EARK,CAAA;AASXC,MAAAA,QAAQ,EAAE,KAAA,CAAA,MAAA,CATC,KAAA;AAUXC,MAAAA,eAAe,EAVJ,CAAA;AAWXC,MAAAA,YAAY,EAAE;AAXH,KAAb;AAcA,IAAA,KAAA,CAAA,UAAA,GAAkBC,KAAK,CAAvB,SAAkBA,EAAlB;AA1BkB,WAAA,KAAA;AA2BnB;;;;wCA8BoB;AACnB,WAAA,QAAA,CAAA,gBAAA,CAAA,WAAA,EAA4C,KAA5C,iBAAA,EAAoE;AAAEU,QAAAA,UAAU,EAAZ,IAAA;AAAoBC,QAAAA,OAAO,EAAE;AAA7B,OAApE;AACD;;;2CAEuB;AACtB,WAAA,QAAA,CAAA,mBAAA,CAAA,WAAA,EAA+C,KAA/C,iBAAA;AACD;;;uCAEmBC,S,EAAW;AAC7B,UAAIA,SAAS,CAATA,UAAAA,IAAwB,CAAC,KAAA,KAAA,CAA7B,UAAA,EAAoD;AAClD,aAAA,kBAAA;AACD;AACF;;;oCA2EgB;AACf,UAAI,CAAC,KAAA,KAAA,CAAD,UAAA,IAA0B,KAAA,KAAA,CAA9B,SAAA,EAAoD;AAClD,aAAA,QAAA,CAAc;AACZtB,UAAAA,UAAU,EADE,IAAA;AAEZO,UAAAA,QAAQ,EAAEV,mBAAmB,GAAG,KAAA,MAAA,CAAH,UAAA,GAA4B,KAAA,KAAA,CAAWU;AAFxD,SAAd;AAKA,aAAA,KAAA,CAAA,SAAA;AACD;AACF;;;2CAUuB;AACtB,WAAA,QAAA,CAAc;AACZL,QAAAA,QAAQ,EADI,KAAA;AAEZC,QAAAA,UAAU,EAFE,KAAA;AAGZH,QAAAA,UAAU,EAHE,KAAA;AAIZK,QAAAA,kBAAkB,EAJN,KAAA;AAKZE,QAAAA,QAAQ,EAAE,KAAA,MAAA,CALE,KAAA;AAMZC,QAAAA,eAAe,EANH,CAAA;AAOZC,QAAAA,YAAY,EAAE;AAPF,OAAd;AASD;;;6BAES;AAAA,UAAA,WAAA,GAC6D,KAD7D,KAAA;AAAA,UACAE,QADA,GAAA,WAAA,CAAA,QAAA;AAAA,UACUE,SADV,GAAA,WAAA,CAAA,SAAA;AAAA,UACqBC,SADrB,GAAA,WAAA,CAAA,SAAA;AAAA,UACgCC,UADhC,GAAA,WAAA,CAAA,UAAA;AAAA,UAC+CiB,SAD/C,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,WAAA,EAAA,YAAA,CAAA,CAAA;;AAAA,UAAA,YAAA,GAEyF,KAFzF,KAAA;AAAA,UAEA9B,QAFA,GAAA,YAAA,CAAA,QAAA;AAAA,UAEUF,UAFV,GAAA,YAAA,CAAA,UAAA;AAAA,UAEsBO,QAFtB,GAAA,YAAA,CAAA,QAAA;AAAA,UAEgCC,eAFhC,GAAA,YAAA,CAAA,eAAA;AAAA,UAEiDL,UAFjD,GAAA,YAAA,CAAA,UAAA;AAAA,UAE6DC,SAF7D,GAAA,YAAA,CAAA,SAAA;AAAA,UAEwEK,YAFxE,GAAA,YAAA,CAAA,YAAA;AAIR,UAAMwB,gBAAgB,GAAA,kBAAA,MAAA,CAAA,QAAA,EAAtB,QAAsB,CAAtB;AACA,UAAMC,gBAAgB,GAAGlC,UAAU,IAAI,CAAdA,SAAAA,IAAAA,eAAAA,GAAAA,0BAAAA,GAA2EmC,eAAe,IAAfA,YAAAA,GAAAA,kBAAAA,MAAAA,CAAAA,YAAAA,EAAAA,QAAAA,CAAAA,GAApG,EAAA;AAEA,aACE,KAAA,CAAA,aAAA,CAAC,gBAAD,CAAA,QAAA,EAAA;AAA2B,QAAA,KAAK,EAAE;AAAlC,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEE,QAAA,OAAO,EAAE,KAFX,YAAA;AAGE,QAAA,MAAM,EAAE,KAHV,WAAA;AAIE,QAAA,KAAK,EAAE,KAJT,UAAA;AAKE,QAAA,SAAS,EAAEC,UAAU,CAAA,aAAA,EAAA,SAAA,EAA2B;AAC9C,qCAD8C,QAAA;AAE9C,uCAA6BpC;AAFiB,SAA3B;AALvB,OAAA,CAAA,EAUE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAa,QAAA,SAAS,EAAC;AAAvB,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAA;AACE,QAAA,KAAK,EAAE;AACLqC,UAAAA,SAAS,EADJ,gBAAA;AAELC,UAAAA,eAAe,EAFV,gBAAA;AAGLC,UAAAA,OAAO,EAAErC,QAAQ,IAARA,UAAAA,IAAAA,UAAAA,GAAAA,CAAAA,GAA2C;AAH/C,SADT;AAME,QAAA,EAAE,EANJ,UAAA;AAOE,QAAA,QAAQ,EAAEF,UAAU,GAAA,IAAA,GAAUQ;AAPhC,OAAA,CADF,CAVF,EAsBE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,QAAA,SAAS,EADX,wBAAA;AAEE,QAAA,GAAG,EAAE,KAFP,UAAA;AAGE,QAAA,KAAK,EAAE;AACL6B,UAAAA,SAAS,EADJ,gBAAA;AAELC,UAAAA,eAAe,EAAEJ;AAFZ;AAHT,OAAA,EAxBN,QAwBM,CAtBF,CADF,CADF;AAqCD;;;wBA1Ke;AACd,aAAO,KAAA,OAAA,CAAA,QAAA,IAAP,QAAA;AACD;;;wBAEa;AACZ,aAAO,KAAA,OAAA,CAAA,MAAA,IAAP,MAAA;AACD;;;wBAgBgB;AACf,aAAO,KAAA,QAAA,CAAA,gBAAA,CAAP,SAAA;AACD;;;;EA1EwCvC,a;;gBAAtBD,a,eA8BA;AACjBiB,EAAAA,QAAQ,EAAEC,SAAS,CADF,IAAA;AAEjBC,EAAAA,SAAS,EAAED,SAAS,CAFH,MAAA;;AAIjB;;;AAGAE,EAAAA,SAAS,EAAEF,SAAS,CAATA,IAAAA,CAPM,UAAA;;AASjB;;;AAGAG,EAAAA,UAAU,EAAEH,SAAS,CAACI;AAZL,C;;gBA9BAtB,a,kBA6CG;AACpBuB,EAAAA,MAAM,EAAEL,SAAS,CADG,GAAA;AAEpBM,EAAAA,QAAQ,EAAEN,SAAS,CAACO;AAFA,C;;SA7CHzB,a","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Touch, { TouchRootContext } from '../Touch/Touch';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport classNames from '../../lib/classNames';\nimport { IS_PLATFORM_IOS, IS_PLATFORM_ANDROID } from '../../lib/platform';\nimport getClassName from '../../helpers/getClassName';\nimport PullToRefreshSpinner from './PullToRefreshSpinner';\n\nconst baseClassName = getClassName('PullToRefresh');\n\nfunction cancelEvent (event) {\n  if (!event) return false;\n  while (event.originalEvent) event = event.originalEvent;\n  if (event.preventDefault) event.preventDefault();\n  if (event.stopPropagation) event.stopPropagation();\n  return false;\n}\n\nexport default class PullToRefresh extends PureComponent {\n  constructor (props) {\n    super(props);\n\n    this.params = {\n      start: IS_PLATFORM_ANDROID ? -45 : -10,\n      max: IS_PLATFORM_ANDROID ? 80 : 50,\n      maxY: IS_PLATFORM_ANDROID ? 80 : 400,\n      refreshing: IS_PLATFORM_ANDROID ? 50 : 36,\n\n      positionMultiplier: IS_PLATFORM_ANDROID ? 1 : 0.21\n    };\n\n    this.state = {\n      watching: false,\n      refreshing: false,\n      canRefresh: false,\n\n      touchDown: false,\n      refreshingFinished: false,\n\n      touchY: 0,\n      spinnerY: this.params.start,\n      spinnerProgress: 0,\n      contentShift: 0\n    };\n\n    this.contentRef = React.createRef();\n  }\n\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n\n    /**\n     * Будет вызвана для обновления контента\n     */\n    onRefresh: PropTypes.func.isRequired,\n\n    /**\n     * Определяет, выполняется ли обновление. Для скрытия спиннера после получения контента необходимо передать `false`\n     */\n    isFetching: PropTypes.bool\n  };\n\n  static contextTypes = {\n    window: PropTypes.any,\n    document: PropTypes.any\n  };\n\n  get document () {\n    return this.context.document || document;\n  }\n\n  get window () {\n    return this.context.window || window;\n  }\n\n  componentDidMount () {\n    this.document.addEventListener('touchmove', this.onWindowTouchMove, { cancelable: true, passive: false });\n  }\n\n  componentWillUnmount () {\n    this.document.removeEventListener('touchmove', this.onWindowTouchMove);\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.isFetching && !this.props.isFetching) {\n      this.onRefreshingFinish();\n    }\n  }\n\n  get scrollTop () {\n    return this.document.scrollingElement.scrollTop;\n  }\n\n  onTouchStart = (e) => {\n    if (this.state.refreshing) cancelEvent(e);\n    this.setState({ touchDown: true });\n  };\n\n  onWindowTouchMove = (e) => {\n    if (this.state.refreshing) cancelEvent(e);\n  };\n\n  onTouchMove = (e) => {\n    const { isY, shiftY } = e;\n    const { start, max } = this.params;\n    const pageYOffset = this.window.pageYOffset;\n\n    const { refreshing, watching, touchDown } = this.state;\n\n    if (watching && touchDown) {\n      cancelEvent(e);\n\n      const { positionMultiplier } = this.params;\n\n      const shift = Math.max(0, shiftY - this.state.touchY);\n\n      const currentY = Math.max(start, Math.min(this.params.maxY, start + (shift * positionMultiplier)));\n      const progress = currentY > -10 ? Math.abs((currentY + 10) / max) * 80 : 0;\n\n      this.setState({\n        spinnerY: currentY,\n        spinnerProgress: Math.min(80, Math.max(0, progress)),\n        canRefresh: progress > 80,\n        contentShift: (currentY + 10) * 2.3\n      });\n\n      if (progress > 85 && !refreshing && IS_PLATFORM_IOS) {\n        this.runRefreshing();\n      }\n    } else if (isY && pageYOffset === 0 && shiftY > 0 && !refreshing && touchDown) {\n      cancelEvent(e);\n\n      this.setState({\n        watching: true,\n        touchY: shiftY,\n        spinnerY: start,\n        spinnerProgress: 0\n      });\n    }\n  };\n\n  onTouchEnd = () => {\n    const { refreshing, canRefresh, refreshingFinished } = this.state;\n\n    this.setState({\n      watching: false,\n      touchDown: false\n    }, () => {\n      if (canRefresh && !refreshing) {\n        this.runRefreshing();\n      } else if (refreshing && refreshingFinished) {\n        this.resetRefreshingState();\n      } else {\n        this.setState({\n          spinnerY: refreshing ? this.params.refreshing : this.params.start,\n          spinnerProgress: 0,\n          contentShift: 0\n        });\n      }\n    });\n  };\n\n  runRefreshing () {\n    if (!this.state.refreshing && this.props.onRefresh) {\n      this.setState({\n        refreshing: true,\n        spinnerY: IS_PLATFORM_ANDROID ? this.params.refreshing : this.state.spinnerY\n      });\n\n      this.props.onRefresh();\n    }\n  }\n\n  onRefreshingFinish = () => {\n    this.setState({\n      refreshingFinished: true\n    }, () => {\n      !this.state.touchDown && this.resetRefreshingState();\n    });\n  }\n\n  resetRefreshingState () {\n    this.setState({\n      watching: false,\n      canRefresh: false,\n      refreshing: false,\n      refreshingFinished: false,\n      spinnerY: this.params.start,\n      spinnerProgress: 0,\n      contentShift: 0\n    });\n  }\n\n  render () {\n    const { children, className, onRefresh, isFetching, ...restProps } = this.props;\n    const { watching, refreshing, spinnerY, spinnerProgress, canRefresh, touchDown, contentShift } = this.state;\n\n    const spinnerTransform = `translate3d(0, ${spinnerY}px, 0)`;\n    const contentTransform = refreshing && !touchDown && IS_PLATFORM_IOS ? `translate3d(0, 100px, 0)` : IS_PLATFORM_IOS && contentShift ? `translate3d(0, ${contentShift}px, 0)` : '';\n\n    return (\n      <TouchRootContext.Provider value={true}>\n        <Touch\n          {...restProps}\n          onStart={this.onTouchStart}\n          onMove={this.onTouchMove}\n          onEnd={this.onTouchEnd}\n          className={classNames(baseClassName, className, {\n            'PullToRefresh--watching': watching,\n            'PullToRefresh--refreshing': refreshing\n          })}\n        >\n          <FixedLayout className=\"PullToRefresh__controls\">\n            <PullToRefreshSpinner\n              style={{\n                transform: spinnerTransform,\n                WebkitTransform: spinnerTransform,\n                opacity: watching || refreshing || canRefresh ? 1 : 0\n              }}\n              on={refreshing}\n              progress={refreshing ? null : spinnerProgress}\n            />\n          </FixedLayout>\n\n          <div\n            className=\"PullToRefresh__content\"\n            ref={this.contentRef}\n            style={{\n              transform: contentTransform,\n              WebkitTransform: contentTransform\n            }}\n          >\n            {children}\n          </div>\n        </Touch>\n      </TouchRootContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}