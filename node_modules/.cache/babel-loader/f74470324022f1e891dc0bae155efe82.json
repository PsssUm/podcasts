{"ast":null,"code":"import { canUseDOM } from './dom';\nexport var OS;\n\n(function (OS) {\n  OS[\"ANDROID\"] = \"android\";\n  OS[\"IOS\"] = \"ios\";\n})(OS || (OS = {}));\n\nexport var ANDROID = OS.ANDROID;\nexport var IOS = OS.IOS;\nexport function platform(useragent) {\n  var ua = useragent || canUseDOM && navigator.userAgent || '';\n  return /android/i.test(ua) ? ANDROID : IOS;\n} // @TODO выпилить в 3.0.0\n\n/**\n * @deprecated будет удалено в 3.0.0, так как для SSR нужно определять osname не один раз при запуске, а на каждый\n * запрос.\n */\n\nvar osname = platform();\n/**\n * @deprecated будет удалено в 3.0.0, используйте platform() === OS.IOS\n */\n\nexport var IS_PLATFORM_IOS = osname === IOS;\n/**\n * @deprecated будет удалено в 3.0.0, используйте platform() === OS.ANDROID\n */\n\nexport var IS_PLATFORM_ANDROID = osname === ANDROID;","map":{"version":3,"sources":["../../../src/lib/platform.ts"],"names":["OS","ANDROID","IOS","ua","useragent","canUseDOM","navigator","osname","platform","IS_PLATFORM_IOS","IS_PLATFORM_ANDROID"],"mappings":"AAAA,SAAA,SAAA,QAAA,OAAA;AAEA,OAAA,IAAA,EAAA;;WAAYA,E;AAAAA,EAAAA,E,WAAAA,G,SAAAA;AAAAA,EAAAA,E,OAAAA,G,KAAAA;GAAAA,E,KAAAA,E;;AAKZ,OAAO,IAAMC,OAAW,GAAGD,EAAE,CAAtB,OAAA;AACP,OAAO,IAAME,GAAO,GAAGF,EAAE,CAAlB,GAAA;AAEP,OAAO,SAAA,QAAA,CAAA,SAAA,EAA0C;AAC/C,MAAMG,EAAE,GAAGC,SAAS,IAAKC,SAAS,IAAIC,SAAS,CAApCF,SAAAA,IAAX,EAAA;AAEA,SAAO,WAAA,IAAA,CAAA,EAAA,IAAA,OAAA,GAAP,GAAA;EAGF;;AACA;;;;;AAIA,IAAMG,MAAM,GAAGC,QAAf,EAAA;AAEA;;;;AAGA,OAAO,IAAMC,eAAwB,GAAGF,MAAM,KAAvC,GAAA;AACP;;;;AAGA,OAAO,IAAMG,mBAA4B,GAAGH,MAAM,KAA3C,OAAA","sourcesContent":["import { canUseDOM } from './dom';\n\nexport enum OS {\n  ANDROID = 'android',\n  IOS = 'ios'\n}\n\nexport const ANDROID: OS = OS.ANDROID;\nexport const IOS: OS = OS.IOS;\n\nexport function platform(useragent?: string): OS {\n  const ua = useragent || (canUseDOM && navigator.userAgent) || '';\n\n  return /android/i.test(ua) ? ANDROID : IOS;\n}\n\n// @TODO выпилить в 3.0.0\n/**\n * @deprecated будет удалено в 3.0.0, так как для SSR нужно определять osname не один раз при запуске, а на каждый\n * запрос.\n */\nconst osname = platform();\n\n/**\n * @deprecated будет удалено в 3.0.0, используйте platform() === OS.IOS\n */\nexport const IS_PLATFORM_IOS: boolean = osname === IOS;\n/**\n * @deprecated будет удалено в 3.0.0, используйте platform() === OS.ANDROID\n */\nexport const IS_PLATFORM_ANDROID: boolean = osname === ANDROID;\n"]},"metadata":{},"sourceType":"module"}