{"ast":null,"code":"var _classCallCheck = require(\"/Users/spbiphones/Dropbox/projects/web projects/podcasts/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/spbiphones/Dropbox/projects/web projects/podcasts/node_modules/@babel/runtime/helpers/createClass\");\n\nvar fs = require('fs');\n\nvar Duration = require('./duration.js');\n\nvar MP3Cutter =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function MP3Cutter() {\n    _classCallCheck(this, MP3Cutter);\n  }\n\n  _createClass(MP3Cutter, null, [{\n    key: \"cut\",\n\n    /**\r\n     * Cuts mp3 files and creates a new file with it.\r\n     * \r\n     * @param {{src:String, target:String, start:Number, end:Number}} o \r\n     */\n    value: function cut() {\n      var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var src = o.src,\n          size = fs.statSync(src).size,\n          _Duration$getDuration = Duration.getDuration(src),\n          duration = _Duration$getDuration.duration,\n          offset = _Duration$getDuration.offset,\n          startTime = o.start || 0,\n          endTime = o.end || duration,\n          valuePerSecond = (size - offset) / duration,\n          start = startTime * valuePerSecond,\n          end = endTime * valuePerSecond;\n\n      var fd = fs.openSync(src, 'r');\n\n      try {\n        var offsetBuffer = Buffer.alloc(offset);\n        fs.readSync(fd, offsetBuffer, 0, offsetBuffer.length, offset);\n        fs.writeFileSync(o.target, offsetBuffer);\n        var audioBuffer = Buffer.alloc(end - start);\n        fs.readSync(fd, audioBuffer, 0, audioBuffer.length, parseInt(start + offset));\n        fs.writeFileSync(o.target, audioBuffer);\n      } catch (e) {\n        console.error(e);\n      } finally {\n        fs.closeSync(fd);\n      }\n    }\n  }]);\n\n  return MP3Cutter;\n}();\n\nmodule.exports = MP3Cutter;","map":{"version":3,"sources":["/Users/spbiphones/Dropbox/projects/web projects/podcasts/node_modules/mp3-cutter/lib/cutter.js"],"names":["fs","require","Duration","MP3Cutter","o","src","size","statSync","getDuration","duration","offset","startTime","start","endTime","end","valuePerSecond","fd","openSync","offsetBuffer","Buffer","alloc","readSync","length","writeFileSync","target","audioBuffer","parseInt","e","console","error","closeSync","module","exports"],"mappings":";;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,eAAD,CAAxB;;IAEME,S;;;;;;;;;;;;AACF;;;;;0BAKiB;AAAA,UAANC,CAAM,uEAAJ,EAAI;;AACT,UAAAC,GAAG,GAAGD,CAAC,CAACC,GAAR;AAAA,UACAC,IADA,GACON,EAAE,CAACO,QAAH,CAAYF,GAAZ,EAAiBC,IADxB;AAAA,kCAEqBJ,QAAQ,CAACM,WAAT,CAAqBH,GAArB,CAFrB;AAAA,UAECI,QAFD,yBAECA,QAFD;AAAA,UAEWC,MAFX,yBAEWA,MAFX;AAAA,UAGAC,SAHA,GAGYP,CAAC,CAACQ,KAAF,IAAW,CAHvB;AAAA,UAIAC,OAJA,GAIUT,CAAC,CAACU,GAAF,IAASL,QAJnB;AAAA,UAKAM,cALA,GAKiB,CAACT,IAAI,GAAGI,MAAR,IAAkBD,QALnC;AAAA,UAMAG,KANA,GAMQD,SAAS,GAAGI,cANpB;AAAA,UAOAD,GAPA,GAOMD,OAAO,GAAGE,cAPhB;;AASJ,UAAIC,EAAE,GAAGhB,EAAE,CAACiB,QAAH,CAAYZ,GAAZ,EAAiB,GAAjB,CAAT;;AACA,UAAI;AACA,YAAIa,YAAY,GAAGC,MAAM,CAACC,KAAP,CAAaV,MAAb,CAAnB;AACAV,QAAAA,EAAE,CAACqB,QAAH,CAAYL,EAAZ,EAAgBE,YAAhB,EAA8B,CAA9B,EAAiCA,YAAY,CAACI,MAA9C,EAAsDZ,MAAtD;AACAV,QAAAA,EAAE,CAACuB,aAAH,CAAiBnB,CAAC,CAACoB,MAAnB,EAA2BN,YAA3B;AAEA,YAAIO,WAAW,GAAGN,MAAM,CAACC,KAAP,CAAaN,GAAG,GAACF,KAAjB,CAAlB;AACAZ,QAAAA,EAAE,CAACqB,QAAH,CAAYL,EAAZ,EAAgBS,WAAhB,EAA6B,CAA7B,EAAgCA,WAAW,CAACH,MAA5C,EAAoDI,QAAQ,CAACd,KAAK,GAACF,MAAP,CAA5D;AACAV,QAAAA,EAAE,CAACuB,aAAH,CAAiBnB,CAAC,CAACoB,MAAnB,EAA2BC,WAA3B;AACH,OARD,CAQE,OAAME,CAAN,EAAS;AACPC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH,OAVD,SAUU;AACN3B,QAAAA,EAAE,CAAC8B,SAAH,CAAad,EAAb;AACH;AACJ;;;;;;AAGLe,MAAM,CAACC,OAAP,GAAiB7B,SAAjB","sourcesContent":["const fs = require('fs');\r\nconst Duration = require('./duration.js');\r\n\r\nclass MP3Cutter {\r\n    /**\r\n     * Cuts mp3 files and creates a new file with it.\r\n     * \r\n     * @param {{src:String, target:String, start:Number, end:Number}} o \r\n     */\r\n    static cut(o={}) {\r\n        var src = o.src,\r\n            size = fs.statSync(src).size,\r\n            {duration, offset} = Duration.getDuration(src),\r\n            startTime = o.start || 0,\r\n            endTime = o.end || duration,\r\n            valuePerSecond = (size - offset) / duration,\r\n            start = startTime * valuePerSecond,\r\n            end = endTime * valuePerSecond;\r\n\r\n        var fd = fs.openSync(src, 'r');\r\n        try {\r\n            var offsetBuffer = Buffer.alloc(offset);\r\n            fs.readSync(fd, offsetBuffer, 0, offsetBuffer.length, offset);\r\n            fs.writeFileSync(o.target, offsetBuffer)\r\n\r\n            var audioBuffer = Buffer.alloc(end-start);\r\n            fs.readSync(fd, audioBuffer, 0, audioBuffer.length, parseInt(start+offset));\r\n            fs.writeFileSync(o.target, audioBuffer);\r\n        } catch(e) {\r\n            console.error(e);\r\n        } finally {\r\n            fs.closeSync(fd);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = MP3Cutter;"]},"metadata":{},"sourceType":"script"}