{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport ReactDOM from 'react-dom';\n\nvar isElement = function isElement(element) {\n  return React.isValidElement(element);\n};\n\nvar isDOMTypeElement = function isDOMTypeElement(element) {\n  return isElement(element) && typeof element.type === 'string';\n};\n\nvar baseClassName = getClassName('Tooltip');\n\nvar TooltipPortal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TooltipPortal, _React$Component);\n\n  function TooltipPortal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TooltipPortal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TooltipPortal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      x: 0,\n      y: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fixedPortal\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"portalTarget\", _this.findPortalTarget());\n\n    _defineProperty(_assertThisInitialized(_this), \"getRef\", function (el) {\n      return _this.el = el;\n    });\n\n    return _this;\n  }\n\n  _createClass(TooltipPortal, [{\n    key: \"findPortalTarget\",\n    value: function findPortalTarget() {\n      var target = this.props.target;\n      var closestFixed = target.closest('.FixedLayout');\n      var closestHeader = target.closest('.PanelHeader__in');\n      var closestPanel = this.document.getElementById(this.context.panel).childNodes[0];\n\n      if (closestFixed || closestHeader) {\n        this.fixedPortal = true;\n      }\n\n      return closestFixed || closestHeader || closestPanel;\n    }\n  }, {\n    key: \"getBoundingTargetRect\",\n    value: function getBoundingTargetRect() {\n      var target = this.props.target;\n      var targetBounds = target.getBoundingClientRect();\n      var portalBounds = this.portalTarget.getBoundingClientRect();\n      return {\n        width: targetBounds.width,\n        height: targetBounds.height,\n        x: targetBounds.left - portalBounds.left,\n        y: targetBounds.top - portalBounds.top\n      };\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.document.removeEventListener('click', this.props.onClose);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          offsetY = _this$props.offsetY,\n          offsetX = _this$props.offsetX,\n          alignX = _this$props.alignX,\n          alignY = _this$props.alignY;\n      var coords = this.getBoundingTargetRect();\n      this.document.addEventListener('click', this.props.onClose);\n      this.setState({\n        x: coords.x + offsetX + (alignX === 'right' ? coords.width - this.el.offsetWidth : 0),\n        y: coords.y + (alignY === 'top' ? -this.el.offsetHeight - offsetY : coords.height + offsetY)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props2 = this.props,\n          title = _this$props2.title,\n          text = _this$props2.text,\n          alignX = _this$props2.alignX,\n          alignY = _this$props2.alignY,\n          cornerOffset = _this$props2.cornerOffset;\n      return ReactDOM.createPortal(React.createElement(\"div\", {\n        className: classNames(baseClassName, (_classNames = {}, _defineProperty(_classNames, \"Tooltip--x-\".concat(alignX), true), _defineProperty(_classNames, \"Tooltip--y-\".concat(alignY), true), _defineProperty(_classNames, 'Tooltip--fixed', this.fixedPortal), _classNames))\n      }, React.createElement(\"div\", {\n        className: \"Tooltip__container\",\n        style: {\n          top: this.state.y,\n          left: this.state.x\n        },\n        ref: this.getRef\n      }, React.createElement(\"div\", {\n        className: \"Tooltip__corner\",\n        style: _defineProperty({}, alignX, 20 + cornerOffset)\n      }), React.createElement(\"div\", {\n        className: \"Tooltip__content\"\n      }, title && React.createElement(\"div\", {\n        className: \"Tooltip__title\"\n      }, title), text && React.createElement(\"div\", {\n        className: \"Tooltip__text\"\n      }, text)))), this.portalTarget);\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.context.document || document;\n    }\n  }]);\n\n  return TooltipPortal;\n}(React.Component);\n\n_defineProperty(TooltipPortal, \"propTypes\", {\n  target: PropTypes.object,\n  text: PropTypes.node,\n  title: PropTypes.node,\n  alignX: PropTypes.oneOf(['left', 'right']),\n  alignY: PropTypes.oneOf(['top', 'bottom']),\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  cornerOffset: PropTypes.number,\n  onClose: PropTypes.func.isRequired\n});\n\n_defineProperty(TooltipPortal, \"contextTypes\", {\n  document: PropTypes.any,\n  panel: PropTypes.string\n});\n\nvar Tooltip =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Tooltip, _React$Component2);\n\n  function Tooltip() {\n    var _getPrototypeOf3;\n\n    var _this2;\n\n    _classCallCheck(this, Tooltip);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(Tooltip)).call.apply(_getPrototypeOf3, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this2), \"state\", {\n      ready: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"getRef\", function (el) {\n      return _this2.targetEl = el;\n    });\n\n    return _this2;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.targetEl && this.setState({\n        ready: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _React$cloneElement;\n\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          isShown = _this$props3.isShown,\n          portalProps = _objectWithoutProperties(_this$props3, [\"children\", \"isShown\"]);\n\n      var child = React.cloneElement(children, (_React$cloneElement = {}, _defineProperty(_React$cloneElement, isDOMTypeElement(children) ? 'ref' : 'getRootRef', this.getRef), _defineProperty(_React$cloneElement, \"key\", 'c'), _React$cloneElement));\n\n      if (!isShown || !this.state.ready) {\n        return child;\n      }\n\n      return [child, React.createElement(TooltipPortal, _extends({}, portalProps, {\n        target: this.targetEl,\n        key: \"t\"\n      }))];\n    }\n  }]);\n\n  return Tooltip;\n}(React.Component);\n\n_defineProperty(Tooltip, \"propTypes\", {\n  /**\n   * **Важно**: если в `children` передан React-компонент, то необходимо убедиться в том, что он поддерживает\n   * свойство `getRootRef`, которое должно возвращаться ссылку на корневой DOM-элемент компонента,\n   * иначе тултип показан не будет. Если передан React-element, то такой проблемы нет.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Если передан `false`, то рисуется просто `children`.\n   */\n  isShown: PropTypes.bool.isRequired,\n\n  /**\n   * Текст тултипа.\n   */\n  text: PropTypes.node,\n\n  /**\n   * Заголовок тултипа.\n   */\n  title: PropTypes.node,\n\n  /**\n   * Положение по горизонтали (прижатие к левому или правому краю `children`).\n   */\n  alignX: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * Положение по вертикали (расположение над или под `children`).\n   */\n  alignY: PropTypes.oneOf(['top', 'bottom']),\n\n  /**\n   * Сдвиг по горизонтали (относительно портала, в котором рисуется тултип).\n   */\n  offsetX: PropTypes.number,\n\n  /**\n   * Сдвиг по вертикали (относительно портала, в котором рисуется тултип).\n   */\n  offsetY: PropTypes.number,\n\n  /**\n   * Сдвиг треугольника (относительно ширины тултипа).\n   */\n  cornerOffset: PropTypes.number,\n\n  /**\n   * Callback, который вызывается при клике по любому месту в пределах экрана.\n   */\n  onClose: PropTypes.func.isRequired\n});\n\n_defineProperty(Tooltip, \"defaultProps\", {\n  offsetX: 0,\n  offsetY: 15,\n  alignX: 'left',\n  alignY: 'bottom',\n  cornerOffset: 0,\n  isShown: true\n});\n\nexport { Tooltip as default };","map":{"version":3,"sources":["../../../../src/components/Tooltip/Tooltip.js"],"names":["isElement","React","isDOMTypeElement","element","baseClassName","getClassName","TooltipPortal","Component","target","PropTypes","text","title","alignX","alignY","offsetX","offsetY","cornerOffset","onClose","isRequired","document","panel","string","x","y","closestFixed","closestHeader","closestPanel","targetBounds","portalBounds","width","height","top","coords","ReactDOM","classNames","left","getRef","Tooltip","children","isShown","ready","portalProps","child"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport ReactDOM from 'react-dom';\n\nconst isElement = element => React.isValidElement(element);\nconst isDOMTypeElement = element => isElement(element) && typeof element.type === 'string';\nconst baseClassName = getClassName('Tooltip');\n\nclass TooltipPortal extends React.Component {\n  static propTypes = {\n    target: PropTypes.object,\n    text: PropTypes.node,\n    title: PropTypes.node,\n    alignX: PropTypes.oneOf(['left', 'right']),\n    alignY: PropTypes.oneOf(['top', 'bottom']),\n    offsetX: PropTypes.number,\n    offsetY: PropTypes.number,\n    cornerOffset: PropTypes.number,\n    onClose: PropTypes.func.isRequired\n  };\n\n  static contextTypes = {\n    document: PropTypes.any,\n    panel: PropTypes.string\n  };\n\n  state = {\n    x: 0,\n    y: 0\n  };\n\n  get document () {\n    return this.context.document || document;\n  }\n\n  fixedPortal = false;\n\n  portalTarget = this.findPortalTarget();\n\n  findPortalTarget () {\n    const { target } = this.props;\n    const closestFixed = target.closest('.FixedLayout');\n    const closestHeader = target.closest('.PanelHeader__in');\n    const closestPanel = this.document.getElementById(this.context.panel).childNodes[0];\n\n    if (closestFixed || closestHeader) {\n      this.fixedPortal = true;\n    }\n\n    return closestFixed || closestHeader || closestPanel;\n  }\n\n  getBoundingTargetRect () {\n    const { target } = this.props;\n    const targetBounds = target.getBoundingClientRect();\n    const portalBounds = this.portalTarget.getBoundingClientRect();\n\n    return {\n      width: targetBounds.width,\n      height: targetBounds.height,\n      x: targetBounds.left - portalBounds.left,\n      y: targetBounds.top - portalBounds.top\n    };\n  }\n\n  componentWillUnmount () {\n    this.document.removeEventListener('click', this.props.onClose);\n  }\n\n  componentDidMount () {\n    const { offsetY, offsetX, alignX, alignY } = this.props;\n    const coords = this.getBoundingTargetRect();\n\n    this.document.addEventListener('click', this.props.onClose);\n\n    this.setState({\n      x: coords.x + offsetX + (alignX === 'right' ? coords.width - this.el.offsetWidth : 0),\n      y: coords.y + (alignY === 'top' ? -this.el.offsetHeight - offsetY : coords.height + offsetY)\n    });\n  }\n\n  getRef = el => this.el = el;\n\n  render () {\n    const { title, text, alignX, alignY, cornerOffset } = this.props;\n\n    return ReactDOM.createPortal(\n      <div className={classNames(baseClassName, {\n        [`Tooltip--x-${alignX}`]: true,\n        [`Tooltip--y-${alignY}`]: true,\n        'Tooltip--fixed': this.fixedPortal\n      })}>\n        <div className=\"Tooltip__container\" style={{ top: this.state.y, left: this.state.x }} ref={this.getRef}>\n          <div className=\"Tooltip__corner\" style={{ [alignX]: 20 + cornerOffset }}/>\n          <div className=\"Tooltip__content\">\n            {title && <div className=\"Tooltip__title\">{title}</div>}\n            {text && <div className=\"Tooltip__text\">{text}</div>}\n          </div>\n        </div>\n      </div>, this.portalTarget);\n  }\n}\n\nexport default class Tooltip extends React.Component {\n  static propTypes = {\n    /**\n     * **Важно**: если в `children` передан React-компонент, то необходимо убедиться в том, что он поддерживает\n     * свойство `getRootRef`, которое должно возвращаться ссылку на корневой DOM-элемент компонента,\n     * иначе тултип показан не будет. Если передан React-element, то такой проблемы нет.\n     */\n    children: PropTypes.node.isRequired,\n    /**\n     * Если передан `false`, то рисуется просто `children`.\n     */\n    isShown: PropTypes.bool.isRequired,\n    /**\n     * Текст тултипа.\n     */\n    text: PropTypes.node,\n    /**\n     * Заголовок тултипа.\n     */\n    title: PropTypes.node,\n    /**\n     * Положение по горизонтали (прижатие к левому или правому краю `children`).\n     */\n    alignX: PropTypes.oneOf(['left', 'right']),\n    /**\n     * Положение по вертикали (расположение над или под `children`).\n     */\n    alignY: PropTypes.oneOf(['top', 'bottom']),\n    /**\n     * Сдвиг по горизонтали (относительно портала, в котором рисуется тултип).\n     */\n    offsetX: PropTypes.number,\n    /**\n     * Сдвиг по вертикали (относительно портала, в котором рисуется тултип).\n     */\n    offsetY: PropTypes.number,\n    /**\n     * Сдвиг треугольника (относительно ширины тултипа).\n     */\n    cornerOffset: PropTypes.number,\n    /**\n     * Callback, который вызывается при клике по любому месту в пределах экрана.\n     */\n    onClose: PropTypes.func.isRequired\n  };\n\n  static defaultProps = {\n    offsetX: 0,\n    offsetY: 15,\n    alignX: 'left',\n    alignY: 'bottom',\n    cornerOffset: 0,\n    isShown: true\n  };\n\n  state = {\n    ready: false\n  };\n\n  componentDidMount () {\n    this.targetEl && this.setState({ ready: true });\n  }\n\n  getRef = el => this.targetEl = el;\n\n  render () {\n    const { children, isShown, ...portalProps } = this.props;\n\n    const child = React.cloneElement(children, {\n      [isDOMTypeElement(children) ? 'ref' : 'getRootRef']: this.getRef, key: 'c'\n    });\n\n    if (!isShown || !this.state.ready) {\n      return child;\n    }\n\n    return [child, <TooltipPortal {...portalProps} target={this.targetEl} key=\"t\" />];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}