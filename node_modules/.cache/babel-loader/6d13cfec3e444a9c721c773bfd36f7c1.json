{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport getClassName from '../../helpers/getClassName';\nimport classNames from '../../lib/classNames';\nvar baseClassName = getClassName('Tabs');\n\nvar Tabs =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tabs, _React$Component);\n\n  function Tabs() {\n    _classCallCheck(this, Tabs);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Tabs).apply(this, arguments));\n  }\n\n  _createClass(Tabs, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          type = _this$props.type,\n          getRootRef = _this$props.getRootRef,\n          restProps = _objectWithoutProperties(_this$props, [\"className\", \"children\", \"theme\", \"style\", \"type\", \"getRootRef\"]);\n\n      return React.createElement(\"div\", _extends({}, restProps, {\n        ref: getRootRef,\n        className: classNames(baseClassName, (_classNames = {}, _defineProperty(_classNames, \"Tabs--\".concat(this.theme), true), _defineProperty(_classNames, \"Tabs--\".concat(type), true), _classNames), className),\n        style: style\n      }), children);\n    }\n  }, {\n    key: \"theme\",\n\n    /**\n     * Метод нужен для маппинга устаревших значений theme на новые\n     * @returns {string}\n     */\n    get: function get() {\n      switch (this.props.theme) {\n        case 'white':\n          return 'header';\n\n        case 'gray':\n          return 'light';\n\n        default:\n          return this.props.theme;\n      }\n    }\n  }]);\n\n  return Tabs;\n}(React.Component);\n\n_defineProperty(Tabs, \"propTypes\", {\n  children: PropTypes.node,\n  className: PropTypes.string,\n\n  /**\n   * Значения white и gray устарели. Они будут удалены в следующей мажорной версии\n   */\n  theme: PropTypes.oneOf(['light', 'header']),\n\n  /**\n   * Свойство отвечает за растягивание табов\n   */\n  type: PropTypes.oneOf(['default', 'buttons']),\n  style: PropTypes.object,\n  getRootRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })])\n});\n\n_defineProperty(Tabs, \"defaultProps\", {\n  theme: 'light',\n  type: 'default'\n});\n\nexport { Tabs as default };","map":{"version":3,"sources":["../../../../src/components/Tabs/Tabs.js"],"names":["baseClassName","getClassName","Tabs","React","Component","children","PropTypes","className","theme","type","style","getRootRef","current","any","restProps","classNames"],"mappings":";;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,YAAA,MAAA,4BAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AAEA,IAAMA,aAAa,GAAGC,YAAY,CAAlC,MAAkC,CAAlC;;IAEqBC,I;;;;;;;;;;;;;6BAuCT;AAAA,UAAA,WAAA;;AAAA,UAAA,WAAA,GACsE,KADtE,KAAA;AAAA,UACAK,SADA,GAAA,WAAA,CAAA,SAAA;AAAA,UACWF,QADX,GAAA,WAAA,CAAA,QAAA;AAAA,UACqBG,KADrB,GAAA,WAAA,CAAA,KAAA;AAAA,UAC4BE,KAD5B,GAAA,WAAA,CAAA,KAAA;AAAA,UACmCD,IADnC,GAAA,WAAA,CAAA,IAAA;AAAA,UACyCE,UADzC,GAAA,WAAA,CAAA,UAAA;AAAA,UACwDG,SADxD,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA,YAAA,CAAA,CAAA;;AAGR,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAAoB,QAAA,GAAG,EAAvB,UAAA;AAAqC,QAAA,SAAS,EAAEC,UAAU,CAAA,aAAA,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,SAAA,MAAA,CAC9C,KAD8C,KAAA,CAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,SAAA,MAAA,CAAA,IAAA,CAAA,EAAA,IAAA,CAAA,EAAA,WAAA,GAA1D,SAA0D,CAA1D;AAGe,QAAA,KAAK,EAAEL;AAHtB,OAAA,CAAA,EADF,QACE,CADF;AAMD;;;;AAxBD;;;;wBAIa;AACX,cAAQ,KAAA,KAAA,CAAR,KAAA;AACE,aAAA,OAAA;AACE,iBAAA,QAAA;;AACF,aAAA,MAAA;AACE,iBAAA,OAAA;;AACF;AACE,iBAAO,KAAA,KAAA,CAAP,KAAA;AANJ;AAQD;;;;EArC+BP,KAAK,CAACC,S;;gBAAnBF,I,eACA;AACjBG,EAAAA,QAAQ,EAAEC,SAAS,CADF,IAAA;AAEjBC,EAAAA,SAAS,EAAED,SAAS,CAFH,MAAA;;AAGjB;;;AAGAE,EAAAA,KAAK,EAAEF,SAAS,CAATA,KAAAA,CAAgB,CAAA,OAAA,EANN,QAMM,CAAhBA,CANU;;AAOjB;;;AAGAG,EAAAA,IAAI,EAAEH,SAAS,CAATA,KAAAA,CAAgB,CAAA,SAAA,EAVL,SAUK,CAAhBA,CAVW;AAWjBI,EAAAA,KAAK,EAAEJ,SAAS,CAXC,MAAA;AAYjBK,EAAAA,UAAU,EAAE,SAAS,CAAT,SAAA,CAAoB,CAC9BL,SAAS,CADqB,IAAA,EAE9B,SAAS,CAAT,KAAA,CAAgB;AAAEM,IAAAA,OAAO,EAAEN,SAAS,CAACO;AAArB,GAAhB,CAF8B,CAApB;AAZK,C;;gBADAX,I,kBAmBG;AACpBM,EAAAA,KAAK,EADe,OAAA;AAEpBC,EAAAA,IAAI,EAAE;AAFc,C;;SAnBHP,I","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport getClassName from '../../helpers/getClassName';\nimport classNames from '../../lib/classNames';\n\nconst baseClassName = getClassName('Tabs');\n\nexport default class Tabs extends React.Component {\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    /**\n     * Значения white и gray устарели. Они будут удалены в следующей мажорной версии\n     */\n    theme: PropTypes.oneOf(['light', 'header']),\n    /**\n     * Свойство отвечает за растягивание табов\n     */\n    type: PropTypes.oneOf(['default', 'buttons']),\n    style: PropTypes.object,\n    getRootRef: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.shape({ current: PropTypes.any })\n    ])\n  };\n\n  static defaultProps = {\n    theme: 'light',\n    type: 'default'\n  };\n\n  /**\n   * Метод нужен для маппинга устаревших значений theme на новые\n   * @returns {string}\n   */\n  get theme () {\n    switch (this.props.theme) {\n      case 'white':\n        return 'header';\n      case 'gray':\n        return 'light';\n      default:\n        return this.props.theme;\n    }\n  }\n\n  render () {\n    const { className, children, theme, style, type, getRootRef, ...restProps } = this.props;\n\n    return (\n      <div {...restProps} ref={getRootRef} className={classNames(baseClassName, {\n        [`Tabs--${this.theme}`]: true,\n        [`Tabs--${type}`]: true\n      }, className)} style={style}>{children}</div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}