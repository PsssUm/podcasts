{"ast":null,"code":"import moment from 'moment';\nimport 'moment/locale/ru';\nexport const getEpmtyModel = () => {\n  var podcast = {\n    title: \"\",\n    description: \"\",\n    duration: \"\",\n    imageSrc: \"\",\n    audioFile: undefined,\n    timecodes: []\n  };\n  return podcast;\n};\nexport const getDatesCount = finishDate => {\n  const currentDate = new Date().getTime() / 1000;\n  var difference = 0;\n\n  if (currentDate < finishDate) {\n    difference = (finishDate - currentDate) / 86400;\n  } else {\n    difference = 0;\n  }\n\n  return Math.round(difference);\n};\nexport const dateToString = date => {\n  return moment.unix(date).format(\"DD MMMM\");\n};","map":{"version":3,"sources":["/Users/spbiphones/Dropbox/projects/web projects/podcasts/src/utils/Utils.js"],"names":["moment","getEpmtyModel","podcast","title","description","duration","imageSrc","audioFile","undefined","timecodes","getDatesCount","finishDate","currentDate","Date","getTime","difference","Math","round","dateToString","date","unix","format"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAO,kBAAP;AACA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,MAAIC,OAAO,GAAG;AACVC,IAAAA,KAAK,EAAG,EADE;AAEVC,IAAAA,WAAW,EAAG,EAFJ;AAGVC,IAAAA,QAAQ,EAAG,EAHD;AAIVC,IAAAA,QAAQ,EAAG,EAJD;AAKVC,IAAAA,SAAS,EAAGC,SALF;AAMVC,IAAAA,SAAS,EAAG;AANF,GAAd;AAQA,SAAOP,OAAP;AACH,CAVM;AAWP,OAAO,MAAMQ,aAAa,GAAIC,UAAD,IAAgB;AACzC,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAA3C;AACA,MAAIC,UAAU,GAAG,CAAjB;;AACA,MAAIH,WAAW,GAAGD,UAAlB,EAA6B;AACzBI,IAAAA,UAAU,GAAG,CAACJ,UAAU,GAAGC,WAAd,IAA6B,KAA1C;AACH,GAFD,MAEO;AACHG,IAAAA,UAAU,GAAG,CAAb;AACH;;AACD,SAAOC,IAAI,CAACC,KAAL,CAAWF,UAAX,CAAP;AACH,CATM;AAUP,OAAO,MAAMG,YAAY,GAAIC,IAAD,IAAU;AAClC,SAAOnB,MAAM,CAACoB,IAAP,CAAYD,IAAZ,EAAkBE,MAAlB,CAAyB,SAAzB,CAAP;AACH,CAFM","sourcesContent":["import moment from 'moment';\nimport 'moment/locale/ru'\nexport const getEpmtyModel = () => {\n    var podcast = {\n        title : \"\",\n        description : \"\",\n        duration : \"\",\n        imageSrc : \"\",\n        audioFile : undefined,\n        timecodes : []\n    }\n    return podcast\n}\nexport const getDatesCount = (finishDate) => {\n    const currentDate = new Date().getTime() / 1000\n    var difference = 0\n    if (currentDate < finishDate){\n        difference = (finishDate - currentDate) / 86400\n    } else {\n        difference = 0\n    }\n    return Math.round(difference)\n}\nexport const dateToString = (date) => {\n    return moment.unix(date).format(\"DD MMMM\")\n}"]},"metadata":{},"sourceType":"module"}