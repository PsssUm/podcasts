{"ast":null,"code":"const fs = require('fs');\n\nconst Duration = require('./duration.js');\n\nclass MP3Cutter {\n  /**\r\n   * Cuts mp3 files and creates a new file with it.\r\n   * \r\n   * @param {{src:String, target:String, start:Number, end:Number}} o \r\n   */\n  static cut(o = {}) {\n    var src = o.src,\n        size = fs.statSync(src).size,\n        _Duration$getDuration = Duration.getDuration(src),\n        duration = _Duration$getDuration.duration,\n        offset = _Duration$getDuration.offset,\n        startTime = o.start || 0,\n        endTime = o.end || duration,\n        valuePerSecond = (size - offset) / duration,\n        start = startTime * valuePerSecond,\n        end = endTime * valuePerSecond;\n\n    var fd = fs.openSync(src, 'r');\n\n    try {\n      var offsetBuffer = Buffer.alloc(offset);\n      fs.readSync(fd, offsetBuffer, 0, offsetBuffer.length, offset);\n      fs.writeFileSync(o.target, offsetBuffer);\n      var audioBuffer = Buffer.alloc(end - start);\n      fs.readSync(fd, audioBuffer, 0, audioBuffer.length, parseInt(start + offset));\n      fs.writeFileSync(o.target, audioBuffer);\n    } catch (e) {\n      console.error(e);\n    } finally {\n      fs.closeSync(fd);\n    }\n  }\n\n}\n\nmodule.exports = MP3Cutter;","map":{"version":3,"sources":["/Users/spbiphones/Dropbox/projects/web projects/podcasts/node_modules/mp3-cutter/lib/cutter.js"],"names":["fs","require","Duration","MP3Cutter","cut","o","src","size","statSync","getDuration","duration","offset","startTime","start","endTime","end","valuePerSecond","fd","openSync","offsetBuffer","Buffer","alloc","readSync","length","writeFileSync","target","audioBuffer","parseInt","e","console","error","closeSync","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,eAAD,CAAxB;;AAEA,MAAME,SAAN,CAAgB;AACZ;;;;;AAKA,SAAOC,GAAP,CAAWC,CAAC,GAAC,EAAb,EAAiB;AACT,QAAAC,GAAG,GAAGD,CAAC,CAACC,GAAR;AAAA,QACAC,IADA,GACOP,EAAE,CAACQ,QAAH,CAAYF,GAAZ,EAAiBC,IADxB;AAAA,gCAEqBL,QAAQ,CAACO,WAAT,CAAqBH,GAArB,CAFrB;AAAA,QAECI,QAFD,yBAECA,QAFD;AAAA,QAEWC,MAFX,yBAEWA,MAFX;AAAA,QAGAC,SAHA,GAGYP,CAAC,CAACQ,KAAF,IAAW,CAHvB;AAAA,QAIAC,OAJA,GAIUT,CAAC,CAACU,GAAF,IAASL,QAJnB;AAAA,QAKAM,cALA,GAKiB,CAACT,IAAI,GAAGI,MAAR,IAAkBD,QALnC;AAAA,QAMAG,KANA,GAMQD,SAAS,GAAGI,cANpB;AAAA,QAOAD,GAPA,GAOMD,OAAO,GAAGE,cAPhB;;AASJ,QAAIC,EAAE,GAAGjB,EAAE,CAACkB,QAAH,CAAYZ,GAAZ,EAAiB,GAAjB,CAAT;;AACA,QAAI;AACA,UAAIa,YAAY,GAAGC,MAAM,CAACC,KAAP,CAAaV,MAAb,CAAnB;AACAX,MAAAA,EAAE,CAACsB,QAAH,CAAYL,EAAZ,EAAgBE,YAAhB,EAA8B,CAA9B,EAAiCA,YAAY,CAACI,MAA9C,EAAsDZ,MAAtD;AACAX,MAAAA,EAAE,CAACwB,aAAH,CAAiBnB,CAAC,CAACoB,MAAnB,EAA2BN,YAA3B;AAEA,UAAIO,WAAW,GAAGN,MAAM,CAACC,KAAP,CAAaN,GAAG,GAACF,KAAjB,CAAlB;AACAb,MAAAA,EAAE,CAACsB,QAAH,CAAYL,EAAZ,EAAgBS,WAAhB,EAA6B,CAA7B,EAAgCA,WAAW,CAACH,MAA5C,EAAoDI,QAAQ,CAACd,KAAK,GAACF,MAAP,CAA5D;AACAX,MAAAA,EAAE,CAACwB,aAAH,CAAiBnB,CAAC,CAACoB,MAAnB,EAA2BC,WAA3B;AACH,KARD,CAQE,OAAME,CAAN,EAAS;AACPC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH,KAVD,SAUU;AACN5B,MAAAA,EAAE,CAAC+B,SAAH,CAAad,EAAb;AACH;AACJ;;AA9BW;;AAiChBe,MAAM,CAACC,OAAP,GAAiB9B,SAAjB","sourcesContent":["const fs = require('fs');\r\nconst Duration = require('./duration.js');\r\n\r\nclass MP3Cutter {\r\n    /**\r\n     * Cuts mp3 files and creates a new file with it.\r\n     * \r\n     * @param {{src:String, target:String, start:Number, end:Number}} o \r\n     */\r\n    static cut(o={}) {\r\n        var src = o.src,\r\n            size = fs.statSync(src).size,\r\n            {duration, offset} = Duration.getDuration(src),\r\n            startTime = o.start || 0,\r\n            endTime = o.end || duration,\r\n            valuePerSecond = (size - offset) / duration,\r\n            start = startTime * valuePerSecond,\r\n            end = endTime * valuePerSecond;\r\n\r\n        var fd = fs.openSync(src, 'r');\r\n        try {\r\n            var offsetBuffer = Buffer.alloc(offset);\r\n            fs.readSync(fd, offsetBuffer, 0, offsetBuffer.length, offset);\r\n            fs.writeFileSync(o.target, offsetBuffer)\r\n\r\n            var audioBuffer = Buffer.alloc(end-start);\r\n            fs.readSync(fd, audioBuffer, 0, audioBuffer.length, parseInt(start+offset));\r\n            fs.writeFileSync(o.target, audioBuffer);\r\n        } catch(e) {\r\n            console.error(e);\r\n        } finally {\r\n            fs.closeSync(fd);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = MP3Cutter;"]},"metadata":{},"sourceType":"script"}