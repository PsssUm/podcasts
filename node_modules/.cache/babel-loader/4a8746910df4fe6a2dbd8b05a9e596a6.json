{"ast":null,"code":"import moment from 'moment';\nimport 'moment/locale/ru';\nimport frederik_chopin from '../resources/music/frederik_chopin.mp3';\nimport lineage_album from '../resources/music/lineage.mp3';\nimport standart_album from '../resources/icons/standart_album.png';\nexport const getEpmtyModel = () => {\n  var podcast = {\n    title: \"\",\n    description: \"\",\n    duration: \"\",\n    imageSrc: standart_album,\n    audioFile: undefined,\n    timecodes: [],\n    isBadContent: false,\n    author: \"Матвей Правосудов\",\n    isExport: false,\n    isTrailer: true,\n    postText: \"\"\n  }; //testing data\n  // var podcast = {\n  //     title : \"Подкаст прекрасных людей\",\n  //     description : \"Подкаст, который рассказывает про то, как много в мире прекрасных вещей, которые можно совершить, а также сколько людей, которые могут помочь вам в реализации ваших заветных мечт.\",\n  //     duration : \"02:54\",\n  //     imageSrc : standart_album,\n  //     author : \"Матвей Правосудов\",\n  //     audioFile : undefined,\n  //     timecodes : [{title : \"Первый\",time : \"01:10\"},{title : \"Второй\",time : \"01:44\"},{title : \"Третий\",time : \"00:10\"},{title : \"Четвертый\",time : \"02:64\"}],\n  //     isBadContent : false,\n  //     isExport : false,\n  //     isTrailer : true,\n  //     postText : \"\",\n  // }\n\n  return podcast;\n};\nexport const getEpmtyTimecodeModel = time => {\n  var timecode = {\n    title: \"\",\n    time: time\n  };\n  return timecode;\n};\nexport const getMusicList = () => {\n  var lineage = {\n    title: \"Lineage\",\n    artist: \"The Hunter Village\",\n    album: \"https://sun9-43.userapi.com/jEQB8fv9j19SIpbHKOsUANclKp6AyTs566i0AA/syjMBeiKHIQ.jpg\",\n    duration: \"02:17\",\n    audio: lineage_album\n  };\n  var chopin = {\n    title: \"Мелодия любви\",\n    artist: \"Frederic Chopin\",\n    album: \"https://sun9-46.userapi.com/Vm-bGQsxis2C7ICLfmAtTB7KGCzvx6-Ip8kOoQ/3V_QLRDzPw4.jpg\",\n    duration: \"02:43\",\n    audio: frederik_chopin\n  };\n  return [lineage, chopin];\n};\nexport const getDatesCount = finishDate => {\n  const currentDate = new Date().getTime() / 1000;\n  var difference = 0;\n\n  if (currentDate < finishDate) {\n    difference = (finishDate - currentDate) / 86400;\n  } else {\n    difference = 0;\n  }\n\n  return Math.round(difference);\n};\nexport const dateToString = date => {\n  return moment.unix(date).format(\"DD MMMM\");\n};\nexport const convertSecondsToTime = secCount => {\n  var sec_num = parseInt(secCount, 10); // don't forget the second param\n\n  var hours = Math.floor(sec_num / 3600);\n  var minutes = Math.floor((sec_num - hours * 3600) / 60);\n  var seconds = sec_num - hours * 3600 - minutes * 60;\n\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  return minutes + ':' + seconds;\n};","map":{"version":3,"sources":["/Users/spbiphones/Dropbox/projects/web projects/podcasts/src/utils/Utils.js"],"names":["moment","frederik_chopin","lineage_album","standart_album","getEpmtyModel","podcast","title","description","duration","imageSrc","audioFile","undefined","timecodes","isBadContent","author","isExport","isTrailer","postText","getEpmtyTimecodeModel","time","timecode","getMusicList","lineage","artist","album","audio","chopin","getDatesCount","finishDate","currentDate","Date","getTime","difference","Math","round","dateToString","date","unix","format","convertSecondsToTime","secCount","sec_num","parseInt","hours","floor","minutes","seconds"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport 'moment/locale/ru'\nimport frederik_chopin from '../resources/music/frederik_chopin.mp3'\nimport lineage_album from '../resources/music/lineage.mp3'\nimport standart_album from '../resources/icons/standart_album.png'\nexport const getEpmtyModel = () => {\n    var podcast = {\n        title : \"\",\n        description : \"\",\n        duration : \"\",\n        imageSrc : standart_album,\n        audioFile : undefined,\n        timecodes : [],\n        isBadContent : false,\n        author : \"Матвей Правосудов\",\n        isExport : false,\n        isTrailer : true,\n        postText : \"\",\n    }\n    //testing data\n    // var podcast = {\n    //     title : \"Подкаст прекрасных людей\",\n    //     description : \"Подкаст, который рассказывает про то, как много в мире прекрасных вещей, которые можно совершить, а также сколько людей, которые могут помочь вам в реализации ваших заветных мечт.\",\n    //     duration : \"02:54\",\n    //     imageSrc : standart_album,\n    //     author : \"Матвей Правосудов\",\n    //     audioFile : undefined,\n    //     timecodes : [{title : \"Первый\",time : \"01:10\"},{title : \"Второй\",time : \"01:44\"},{title : \"Третий\",time : \"00:10\"},{title : \"Четвертый\",time : \"02:64\"}],\n    //     isBadContent : false,\n    //     isExport : false,\n    //     isTrailer : true,\n    //     postText : \"\",\n    // }\n     return podcast\n}\nexport const getEpmtyTimecodeModel = (time) => {\n    var timecode = {\n        title : \"\",\n        time : time\n    }\n    return timecode\n}\nexport const getMusicList = () => {\n    var lineage = {\n        title : \"Lineage\",\n        artist : \"The Hunter Village\",\n        album : \"https://sun9-43.userapi.com/jEQB8fv9j19SIpbHKOsUANclKp6AyTs566i0AA/syjMBeiKHIQ.jpg\",\n        duration : \"02:17\",\n        audio : lineage_album\n    }\n    var chopin = {\n        title : \"Мелодия любви\",\n        artist : \"Frederic Chopin\",\n        album : \"https://sun9-46.userapi.com/Vm-bGQsxis2C7ICLfmAtTB7KGCzvx6-Ip8kOoQ/3V_QLRDzPw4.jpg\",\n        duration : \"02:43\",\n        audio : frederik_chopin\n    }\n    return [lineage, chopin]\n}\nexport const getDatesCount = (finishDate) => {\n    const currentDate = new Date().getTime() / 1000\n    var difference = 0\n    if (currentDate < finishDate){\n        difference = (finishDate - currentDate) / 86400\n    } else {\n        difference = 0\n    }\n    return Math.round(difference)\n}\nexport const dateToString = (date) => {\n    return moment.unix(date).format(\"DD MMMM\")\n}\nexport const convertSecondsToTime = (secCount) => {\n    var sec_num = parseInt(secCount, 10); // don't forget the second param\n    var hours   = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours   < 10) {hours   = \"0\"+hours;}\n    if (minutes < 10) {minutes = \"0\"+minutes;}\n    if (seconds < 10) {seconds = \"0\"+seconds;}\n    return minutes+':'+seconds;\n}"]},"metadata":{},"sourceType":"module"}